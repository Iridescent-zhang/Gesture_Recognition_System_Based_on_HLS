// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module test_Hu_AddWeightedKernel_0_0_600_1024_1_2_2_2_1_0_0_1_1_1024_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        img_2x_data66_dout,
        img_2x_data66_num_data_valid,
        img_2x_data66_fifo_cap,
        img_2x_data66_empty_n,
        img_2x_data66_read,
        img_2y_data67_dout,
        img_2y_data67_num_data_valid,
        img_2y_data67_fifo_cap,
        img_2y_data67_empty_n,
        img_2y_data67_read,
        img_3_data68_din,
        img_3_data68_num_data_valid,
        img_3_data68_fifo_cap,
        img_3_data68_full_n,
        img_3_data68_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] img_2x_data66_dout;
input  [1:0] img_2x_data66_num_data_valid;
input  [1:0] img_2x_data66_fifo_cap;
input   img_2x_data66_empty_n;
output   img_2x_data66_read;
input  [7:0] img_2y_data67_dout;
input  [1:0] img_2y_data67_num_data_valid;
input  [1:0] img_2y_data67_fifo_cap;
input   img_2y_data67_empty_n;
output   img_2y_data67_read;
output  [7:0] img_3_data68_din;
input  [1:0] img_3_data68_num_data_valid;
input  [1:0] img_3_data68_fifo_cap;
input   img_3_data68_full_n;
output   img_3_data68_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_2x_data66_read;
reg img_2y_data67_read;
reg img_3_data68_write;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_start;
wire    grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_done;
wire    grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_idle;
wire    grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_ready;
wire    grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_img_2x_data66_read;
wire    grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_img_2y_data67_read;
wire   [7:0] grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_img_3_data68_din;
wire    grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_img_3_data68_write;
reg    grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln65_fu_58_p2;
wire    ap_CS_fsm_state3;
reg   [9:0] i_V_fu_36;
wire   [9:0] i_V_6_fu_64_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_start_reg = 1'b0;
end

test_Hu_AddWeightedKernel_Pipeline_ColLoop grp_AddWeightedKernel_Pipeline_ColLoop_fu_40(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_start),
    .ap_done(grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_done),
    .ap_idle(grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_idle),
    .ap_ready(grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_ready),
    .img_2x_data66_dout(img_2x_data66_dout),
    .img_2x_data66_num_data_valid(2'd0),
    .img_2x_data66_fifo_cap(2'd0),
    .img_2x_data66_empty_n(img_2x_data66_empty_n),
    .img_2x_data66_read(grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_img_2x_data66_read),
    .img_2y_data67_dout(img_2y_data67_dout),
    .img_2y_data67_num_data_valid(2'd0),
    .img_2y_data67_fifo_cap(2'd0),
    .img_2y_data67_empty_n(img_2y_data67_empty_n),
    .img_2y_data67_read(grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_img_2y_data67_read),
    .img_3_data68_din(grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_img_3_data68_din),
    .img_3_data68_num_data_valid(2'd0),
    .img_3_data68_fifo_cap(2'd0),
    .img_3_data68_full_n(img_3_data68_full_n),
    .img_3_data68_write(grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_img_3_data68_write)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln65_fu_58_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_start_reg <= 1'b1;
        end else if ((grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_ready == 1'b1)) begin
            grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_V_fu_36 <= 10'd0;
    end else if (((icmp_ln65_fu_58_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_V_fu_36 <= i_V_6_fu_64_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln65_fu_58_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln65_fu_58_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        img_2x_data66_read = grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_img_2x_data66_read;
    end else begin
        img_2x_data66_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        img_2y_data67_read = grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_img_2y_data67_read;
    end else begin
        img_2y_data67_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        img_3_data68_write = grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_img_3_data68_write;
    end else begin
        img_3_data68_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln65_fu_58_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_start = grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_start_reg;

assign i_V_6_fu_64_p2 = (i_V_fu_36 + 10'd1);

assign icmp_ln65_fu_58_p2 = ((i_V_fu_36 == 10'd600) ? 1'b1 : 1'b0);

assign img_3_data68_din = grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_img_3_data68_din;

endmodule //test_Hu_AddWeightedKernel_0_0_600_1024_1_2_2_2_1_0_0_1_1_1024_s

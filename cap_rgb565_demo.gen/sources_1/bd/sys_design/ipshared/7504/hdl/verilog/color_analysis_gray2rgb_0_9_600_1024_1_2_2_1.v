// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module color_analysis_gray2rgb_0_9_600_1024_1_2_2_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        img_4b_data169_dout,
        img_4b_data169_num_data_valid,
        img_4b_data169_fifo_cap,
        img_4b_data169_empty_n,
        img_4b_data169_read,
        img_6_data171_din,
        img_6_data171_num_data_valid,
        img_6_data171_fifo_cap,
        img_6_data171_full_n,
        img_6_data171_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_read;
input  [31:0] p_read1;
input  [7:0] img_4b_data169_dout;
input  [1:0] img_4b_data169_num_data_valid;
input  [1:0] img_4b_data169_fifo_cap;
input   img_4b_data169_empty_n;
output   img_4b_data169_read;
output  [23:0] img_6_data171_din;
input  [1:0] img_6_data171_num_data_valid;
input  [1:0] img_6_data171_fifo_cap;
input   img_6_data171_full_n;
output   img_6_data171_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_4b_data169_read;
reg img_6_data171_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [15:0] height_fu_63_p1;
reg   [15:0] height_reg_106;
wire   [15:0] width_fu_67_p1;
reg   [15:0] width_reg_111;
wire    grp_gray2rgb_0_9_600_1024_1_2_2_1_Pipeline_columnloop_fu_54_ap_start;
wire    grp_gray2rgb_0_9_600_1024_1_2_2_1_Pipeline_columnloop_fu_54_ap_done;
wire    grp_gray2rgb_0_9_600_1024_1_2_2_1_Pipeline_columnloop_fu_54_ap_idle;
wire    grp_gray2rgb_0_9_600_1024_1_2_2_1_Pipeline_columnloop_fu_54_ap_ready;
wire    grp_gray2rgb_0_9_600_1024_1_2_2_1_Pipeline_columnloop_fu_54_img_4b_data169_read;
wire   [23:0] grp_gray2rgb_0_9_600_1024_1_2_2_1_Pipeline_columnloop_fu_54_img_6_data171_din;
wire    grp_gray2rgb_0_9_600_1024_1_2_2_1_Pipeline_columnloop_fu_54_img_6_data171_write;
reg    grp_gray2rgb_0_9_600_1024_1_2_2_1_Pipeline_columnloop_fu_54_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln1027_fu_83_p2;
wire    ap_CS_fsm_state3;
reg   [12:0] i_V_fu_38;
wire   [12:0] i_V_2_fu_88_p2;
reg    ap_block_state1;
wire   [15:0] zext_ln1027_fu_79_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_gray2rgb_0_9_600_1024_1_2_2_1_Pipeline_columnloop_fu_54_ap_start_reg = 1'b0;
end

color_analysis_gray2rgb_0_9_600_1024_1_2_2_1_Pipeline_columnloop grp_gray2rgb_0_9_600_1024_1_2_2_1_Pipeline_columnloop_fu_54(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_gray2rgb_0_9_600_1024_1_2_2_1_Pipeline_columnloop_fu_54_ap_start),
    .ap_done(grp_gray2rgb_0_9_600_1024_1_2_2_1_Pipeline_columnloop_fu_54_ap_done),
    .ap_idle(grp_gray2rgb_0_9_600_1024_1_2_2_1_Pipeline_columnloop_fu_54_ap_idle),
    .ap_ready(grp_gray2rgb_0_9_600_1024_1_2_2_1_Pipeline_columnloop_fu_54_ap_ready),
    .img_4b_data169_dout(img_4b_data169_dout),
    .img_4b_data169_num_data_valid(2'd0),
    .img_4b_data169_fifo_cap(2'd0),
    .img_4b_data169_empty_n(img_4b_data169_empty_n),
    .img_4b_data169_read(grp_gray2rgb_0_9_600_1024_1_2_2_1_Pipeline_columnloop_fu_54_img_4b_data169_read),
    .img_6_data171_din(grp_gray2rgb_0_9_600_1024_1_2_2_1_Pipeline_columnloop_fu_54_img_6_data171_din),
    .img_6_data171_num_data_valid(2'd0),
    .img_6_data171_fifo_cap(2'd0),
    .img_6_data171_full_n(img_6_data171_full_n),
    .img_6_data171_write(grp_gray2rgb_0_9_600_1024_1_2_2_1_Pipeline_columnloop_fu_54_img_6_data171_write),
    .width(width_reg_111)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln1027_fu_83_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_gray2rgb_0_9_600_1024_1_2_2_1_Pipeline_columnloop_fu_54_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln1027_fu_83_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_gray2rgb_0_9_600_1024_1_2_2_1_Pipeline_columnloop_fu_54_ap_start_reg <= 1'b1;
        end else if ((grp_gray2rgb_0_9_600_1024_1_2_2_1_Pipeline_columnloop_fu_54_ap_ready == 1'b1)) begin
            grp_gray2rgb_0_9_600_1024_1_2_2_1_Pipeline_columnloop_fu_54_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_V_fu_38 <= 13'd0;
    end else if (((icmp_ln1027_fu_83_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_V_fu_38 <= i_V_2_fu_88_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        height_reg_106 <= height_fu_63_p1;
        width_reg_111 <= width_fu_67_p1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_gray2rgb_0_9_600_1024_1_2_2_1_Pipeline_columnloop_fu_54_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_fu_83_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_fu_83_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        img_4b_data169_read = grp_gray2rgb_0_9_600_1024_1_2_2_1_Pipeline_columnloop_fu_54_img_4b_data169_read;
    end else begin
        img_4b_data169_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        img_6_data171_write = grp_gray2rgb_0_9_600_1024_1_2_2_1_Pipeline_columnloop_fu_54_img_6_data171_write;
    end else begin
        img_6_data171_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln1027_fu_83_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_gray2rgb_0_9_600_1024_1_2_2_1_Pipeline_columnloop_fu_54_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_gray2rgb_0_9_600_1024_1_2_2_1_Pipeline_columnloop_fu_54_ap_start = grp_gray2rgb_0_9_600_1024_1_2_2_1_Pipeline_columnloop_fu_54_ap_start_reg;

assign height_fu_63_p1 = p_read[15:0];

assign i_V_2_fu_88_p2 = (i_V_fu_38 + 13'd1);

assign icmp_ln1027_fu_83_p2 = ((zext_ln1027_fu_79_p1 < height_reg_106) ? 1'b1 : 1'b0);

assign img_6_data171_din = grp_gray2rgb_0_9_600_1024_1_2_2_1_Pipeline_columnloop_fu_54_img_6_data171_din;

assign width_fu_67_p1 = p_read1[15:0];

assign zext_ln1027_fu_79_p1 = i_V_fu_38;

endmodule //color_analysis_gray2rgb_0_9_600_1024_1_2_2_1

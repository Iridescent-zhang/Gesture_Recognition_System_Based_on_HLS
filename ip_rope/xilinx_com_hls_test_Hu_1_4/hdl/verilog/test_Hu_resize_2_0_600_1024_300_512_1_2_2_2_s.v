// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module test_Hu_resize_2_0_600_1024_300_512_1_2_2_2_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        img_3_data68_dout,
        img_3_data68_num_data_valid,
        img_3_data68_fifo_cap,
        img_3_data68_empty_n,
        img_3_data68_read,
        img_4_data69_din,
        img_4_data69_num_data_valid,
        img_4_data69_fifo_cap,
        img_4_data69_full_n,
        img_4_data69_write,
        img_4_rows_c_din,
        img_4_rows_c_num_data_valid,
        img_4_rows_c_fifo_cap,
        img_4_rows_c_full_n,
        img_4_rows_c_write,
        img_4_cols_c_din,
        img_4_cols_c_num_data_valid,
        img_4_cols_c_fifo_cap,
        img_4_cols_c_full_n,
        img_4_cols_c_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] img_3_data68_dout;
input  [1:0] img_3_data68_num_data_valid;
input  [1:0] img_3_data68_fifo_cap;
input   img_3_data68_empty_n;
output   img_3_data68_read;
output  [7:0] img_4_data69_din;
input  [1:0] img_4_data69_num_data_valid;
input  [1:0] img_4_data69_fifo_cap;
input   img_4_data69_full_n;
output   img_4_data69_write;
output  [8:0] img_4_rows_c_din;
input  [1:0] img_4_rows_c_num_data_valid;
input  [1:0] img_4_rows_c_fifo_cap;
input   img_4_rows_c_full_n;
output   img_4_rows_c_write;
output  [9:0] img_4_cols_c_din;
input  [1:0] img_4_cols_c_num_data_valid;
input  [1:0] img_4_cols_c_fifo_cap;
input   img_4_cols_c_full_n;
output   img_4_cols_c_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg img_3_data68_read;
reg img_4_data69_write;
reg img_4_rows_c_write;
reg img_4_cols_c_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    img_4_rows_c_blk_n;
reg    img_4_cols_c_blk_n;
wire    grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_ap_start;
wire    grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_ap_done;
wire    grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_ap_idle;
wire    grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_ap_ready;
wire    grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_img_3_data68_read;
wire   [7:0] grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_img_4_data69_din;
wire    grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_img_4_data69_write;
reg    grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_ap_start_reg;
reg    ap_block_state1_ignore_call6;
wire    ap_CS_fsm_state2;
reg    ap_block_state1;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_ap_start_reg = 1'b0;
end

test_Hu_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_ap_start),
    .ap_done(grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_ap_done),
    .ap_idle(grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_ap_idle),
    .ap_ready(grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_ap_ready),
    .img_3_data68_dout(img_3_data68_dout),
    .img_3_data68_num_data_valid(2'd0),
    .img_3_data68_fifo_cap(2'd0),
    .img_3_data68_empty_n(img_3_data68_empty_n),
    .img_3_data68_read(grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_img_3_data68_read),
    .img_4_data69_din(grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_img_4_data69_din),
    .img_4_data69_num_data_valid(2'd0),
    .img_4_data69_fifo_cap(2'd0),
    .img_4_data69_full_n(img_4_data69_full_n),
    .img_4_data69_write(grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_img_4_data69_write)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_ap_start_reg <= 1'b0;
    end else begin
        if ((~((real_start == 1'b0) | (img_4_cols_c_full_n == 1'b0) | (img_4_rows_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_ap_start_reg <= 1'b1;
        end else if ((grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_ap_ready == 1'b1)) begin
            grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (img_4_cols_c_full_n == 1'b0) | (img_4_rows_c_full_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        img_3_data68_read = grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_img_3_data68_read;
    end else begin
        img_3_data68_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_4_cols_c_blk_n = img_4_cols_c_full_n;
    end else begin
        img_4_cols_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (img_4_cols_c_full_n == 1'b0) | (img_4_rows_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_4_cols_c_write = 1'b1;
    end else begin
        img_4_cols_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        img_4_data69_write = grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_img_4_data69_write;
    end else begin
        img_4_data69_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_4_rows_c_blk_n = img_4_rows_c_full_n;
    end else begin
        img_4_rows_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (img_4_cols_c_full_n == 1'b0) | (img_4_rows_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_4_rows_c_write = 1'b1;
    end else begin
        img_4_rows_c_write = 1'b0;
    end
end

always @ (*) begin
    if (((grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (img_4_cols_c_full_n == 1'b0) | (img_4_rows_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (img_4_cols_c_full_n == 1'b0) | (img_4_rows_c_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call6 = ((real_start == 1'b0) | (img_4_cols_c_full_n == 1'b0) | (img_4_rows_c_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_ap_start = grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_ap_start_reg;

assign img_4_cols_c_din = 10'd512;

assign img_4_data69_din = grp_xFResizeAreaDownScale_600_1024_1_0_1_2_2_1_300_512_1024_512_s_fu_54_img_4_data69_din;

assign img_4_rows_c_din = 9'd300;

assign start_out = real_start;

endmodule //test_Hu_resize_2_0_600_1024_300_512_1_2_2_2_s

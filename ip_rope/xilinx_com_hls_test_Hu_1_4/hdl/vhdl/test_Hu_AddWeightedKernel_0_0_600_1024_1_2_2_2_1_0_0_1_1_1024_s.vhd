-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity test_Hu_AddWeightedKernel_0_0_600_1024_1_2_2_2_1_0_0_1_1_1024_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_2x_data66_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_2x_data66_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    img_2x_data66_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    img_2x_data66_empty_n : IN STD_LOGIC;
    img_2x_data66_read : OUT STD_LOGIC;
    img_2y_data67_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_2y_data67_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    img_2y_data67_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    img_2y_data67_empty_n : IN STD_LOGIC;
    img_2y_data67_read : OUT STD_LOGIC;
    img_3_data68_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_3_data68_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    img_3_data68_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    img_3_data68_full_n : IN STD_LOGIC;
    img_3_data68_write : OUT STD_LOGIC );
end;


architecture behav of test_Hu_AddWeightedKernel_0_0_600_1024_1_2_2_2_1_0_0_1_1_1024_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_258 : STD_LOGIC_VECTOR (9 downto 0) := "1001011000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_start : STD_LOGIC;
    signal grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_done : STD_LOGIC;
    signal grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_idle : STD_LOGIC;
    signal grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_ready : STD_LOGIC;
    signal grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_img_2x_data66_read : STD_LOGIC;
    signal grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_img_2y_data67_read : STD_LOGIC;
    signal grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_img_3_data68_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_img_3_data68_write : STD_LOGIC;
    signal grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln65_fu_58_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_V_fu_36 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_V_6_fu_64_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component test_Hu_AddWeightedKernel_Pipeline_ColLoop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_2x_data66_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_2x_data66_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_2x_data66_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_2x_data66_empty_n : IN STD_LOGIC;
        img_2x_data66_read : OUT STD_LOGIC;
        img_2y_data67_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_2y_data67_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_2y_data67_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_2y_data67_empty_n : IN STD_LOGIC;
        img_2y_data67_read : OUT STD_LOGIC;
        img_3_data68_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_3_data68_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_3_data68_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_3_data68_full_n : IN STD_LOGIC;
        img_3_data68_write : OUT STD_LOGIC );
    end component;



begin
    grp_AddWeightedKernel_Pipeline_ColLoop_fu_40 : component test_Hu_AddWeightedKernel_Pipeline_ColLoop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_start,
        ap_done => grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_done,
        ap_idle => grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_idle,
        ap_ready => grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_ready,
        img_2x_data66_dout => img_2x_data66_dout,
        img_2x_data66_num_data_valid => ap_const_lv2_0,
        img_2x_data66_fifo_cap => ap_const_lv2_0,
        img_2x_data66_empty_n => img_2x_data66_empty_n,
        img_2x_data66_read => grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_img_2x_data66_read,
        img_2y_data67_dout => img_2y_data67_dout,
        img_2y_data67_num_data_valid => ap_const_lv2_0,
        img_2y_data67_fifo_cap => ap_const_lv2_0,
        img_2y_data67_empty_n => img_2y_data67_empty_n,
        img_2y_data67_read => grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_img_2y_data67_read,
        img_3_data68_din => grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_img_3_data68_din,
        img_3_data68_num_data_valid => ap_const_lv2_0,
        img_3_data68_fifo_cap => ap_const_lv2_0,
        img_3_data68_full_n => img_3_data68_full_n,
        img_3_data68_write => grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_img_3_data68_write);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln65_fu_58_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_ready = ap_const_logic_1)) then 
                    grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_V_fu_36_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_V_fu_36 <= ap_const_lv10_0;
            elsif (((icmp_ln65_fu_58_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_V_fu_36 <= i_V_6_fu_64_p2;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_done, ap_CS_fsm_state2, icmp_ln65_fu_58_p2, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln65_fu_58_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_done)
    begin
        if ((grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln65_fu_58_p2)
    begin
        if ((((icmp_ln65_fu_58_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln65_fu_58_p2)
    begin
        if (((icmp_ln65_fu_58_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_start <= grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_ap_start_reg;
    i_V_6_fu_64_p2 <= std_logic_vector(unsigned(i_V_fu_36) + unsigned(ap_const_lv10_1));
    icmp_ln65_fu_58_p2 <= "1" when (i_V_fu_36 = ap_const_lv10_258) else "0";

    img_2x_data66_read_assign_proc : process(grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_img_2x_data66_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            img_2x_data66_read <= grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_img_2x_data66_read;
        else 
            img_2x_data66_read <= ap_const_logic_0;
        end if; 
    end process;


    img_2y_data67_read_assign_proc : process(grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_img_2y_data67_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            img_2y_data67_read <= grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_img_2y_data67_read;
        else 
            img_2y_data67_read <= ap_const_logic_0;
        end if; 
    end process;

    img_3_data68_din <= grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_img_3_data68_din;

    img_3_data68_write_assign_proc : process(grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_img_3_data68_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            img_3_data68_write <= grp_AddWeightedKernel_Pipeline_ColLoop_fu_40_img_3_data68_write;
        else 
            img_3_data68_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;

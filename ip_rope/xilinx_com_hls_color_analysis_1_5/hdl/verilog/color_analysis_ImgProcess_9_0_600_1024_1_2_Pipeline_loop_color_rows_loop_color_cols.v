// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module color_analysis_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        img_1_data164_dout,
        img_1_data164_num_data_valid,
        img_1_data164_fifo_cap,
        img_1_data164_empty_n,
        img_1_data164_read,
        img_2_data165_din,
        img_2_data165_num_data_valid,
        img_2_data165_fifo_cap,
        img_2_data165_full_n,
        img_2_data165_write,
        bound,
        cb_lower_load,
        cb_upper_load,
        cr_lower_load,
        cr_upper_load
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] img_1_data164_dout;
input  [1:0] img_1_data164_num_data_valid;
input  [1:0] img_1_data164_fifo_cap;
input   img_1_data164_empty_n;
output   img_1_data164_read;
output  [7:0] img_2_data165_din;
input  [1:0] img_2_data165_num_data_valid;
input  [1:0] img_2_data165_fifo_cap;
input   img_2_data165_full_n;
output   img_2_data165_write;
input  [63:0] bound;
input  [31:0] cb_lower_load;
input  [31:0] cb_upper_load;
input  [31:0] cr_lower_load;
input  [31:0] cr_upper_load;

reg ap_idle;
reg img_1_data164_read;
reg img_2_data165_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
reg    ap_block_state8_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln22_fu_137_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    img_1_data164_blk_n;
wire    ap_block_pp0_stage0;
reg    img_2_data165_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [7:0] B_V_fu_153_p1;
reg   [7:0] B_V_reg_367;
reg   [7:0] B_V_reg_367_pp0_iter3_reg;
reg   [7:0] B_V_reg_367_pp0_iter4_reg;
reg   [7:0] trunc_ln_reg_373;
reg   [7:0] trunc_ln_reg_373_pp0_iter3_reg;
wire   [14:0] zext_ln1494_2_fu_177_p1;
reg   [7:0] trunc_ln1_reg_400;
wire   [15:0] grp_fu_314_p3;
wire   [0:0] icmp_ln1035_fu_258_p2;
reg   [0:0] icmp_ln1035_reg_410;
wire   [0:0] icmp_ln1027_fu_263_p2;
reg   [0:0] icmp_ln1027_reg_415;
wire   [0:0] icmp_ln1035_8_fu_272_p2;
reg   [0:0] icmp_ln1035_8_reg_420;
wire   [0:0] icmp_ln1027_102_fu_277_p2;
reg   [0:0] icmp_ln1027_102_reg_425;
reg   [63:0] indvar_flatten_fu_82;
wire   [63:0] add_ln22_fu_142_p2;
wire    ap_loop_init;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] tmp_fu_167_p4;
wire   [7:0] ret_V_10_fu_187_p0;
wire  signed [6:0] ret_V_10_fu_187_p1;
wire  signed [14:0] ret_V_10_fu_187_p2;
wire   [14:0] ret_V_13_fu_197_p3;
wire   [14:0] ret_V_12_fu_208_p3;
wire  signed [15:0] grp_fu_305_p3;
wire   [15:0] zext_ln1495_fu_215_p1;
(* use_dsp48 = "no" *) wire   [15:0] ret_V_4_fu_219_p2;
wire   [15:0] grp_fu_322_p3;
wire   [7:0] trunc_ln1669_1_fu_239_p4;
wire   [7:0] Cb_V_fu_234_p2;
wire   [31:0] zext_ln1035_fu_254_p1;
wire   [7:0] Cr_V_fu_248_p2;
wire   [31:0] zext_ln1035_1_fu_268_p1;
wire   [0:0] and_ln40_1_fu_286_p2;
wire   [0:0] and_ln40_fu_282_p2;
wire   [0:0] and_ln40_2_fu_290_p2;
wire   [7:0] grp_fu_305_p0;
wire   [6:0] grp_fu_305_p1;
wire   [7:0] grp_fu_314_p0;
wire   [6:0] grp_fu_314_p1;
wire   [14:0] grp_fu_314_p2;
wire   [7:0] grp_fu_322_p0;
wire   [4:0] grp_fu_322_p1;
reg    grp_fu_305_ce;
reg    grp_fu_314_ce;
reg    grp_fu_322_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [15:0] grp_fu_314_p20;
wire   [12:0] grp_fu_322_p00;
wire   [14:0] ret_V_10_fu_187_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_done_reg = 1'b0;
end

color_analysis_mul_8ns_7s_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 15 ))
mul_8ns_7s_15_1_1_U123(
    .din0(ret_V_10_fu_187_p0),
    .din1(ret_V_10_fu_187_p1),
    .dout(ret_V_10_fu_187_p2)
);

color_analysis_mac_mulsub_8ns_7ns_15s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 15 ),
    .dout_WIDTH( 16 ))
mac_mulsub_8ns_7ns_15s_16_4_1_U124(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_305_p0),
    .din1(grp_fu_305_p1),
    .din2(ret_V_10_fu_187_p2),
    .ce(grp_fu_305_ce),
    .dout(grp_fu_305_p3)
);

color_analysis_mac_mulsub_8ns_7ns_15ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 15 ),
    .dout_WIDTH( 16 ))
mac_mulsub_8ns_7ns_15ns_16_4_1_U125(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_314_p0),
    .din1(grp_fu_314_p1),
    .din2(grp_fu_314_p2),
    .ce(grp_fu_314_ce),
    .dout(grp_fu_314_p3)
);

color_analysis_mac_mulsub_8ns_5ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_mulsub_8ns_5ns_16ns_16_4_1_U126(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_322_p0),
    .din1(grp_fu_322_p1),
    .din2(grp_fu_314_p3),
    .ce(grp_fu_322_ce),
    .dout(grp_fu_322_p3)
);

color_analysis_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_82 <= 64'd0;
        end else if (((icmp_ln22_fu_137_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_82 <= add_ln22_fu_142_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        B_V_reg_367 <= B_V_fu_153_p1;
        B_V_reg_367_pp0_iter3_reg <= B_V_reg_367;
        B_V_reg_367_pp0_iter4_reg <= B_V_reg_367_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        icmp_ln1027_102_reg_425 <= icmp_ln1027_102_fu_277_p2;
        icmp_ln1027_reg_415 <= icmp_ln1027_fu_263_p2;
        icmp_ln1035_8_reg_420 <= icmp_ln1035_8_fu_272_p2;
        icmp_ln1035_reg_410 <= icmp_ln1035_fu_258_p2;
        trunc_ln1_reg_400 <= {{ret_V_4_fu_219_p2[15:8]}};
        trunc_ln_reg_373 <= {{img_1_data164_dout[23:16]}};
        trunc_ln_reg_373_pp0_iter3_reg <= trunc_ln_reg_373;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_137_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_305_ce = 1'b1;
    end else begin
        grp_fu_305_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_314_ce = 1'b1;
    end else begin
        grp_fu_314_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_322_ce = 1'b1;
    end else begin
        grp_fu_322_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        img_1_data164_blk_n = img_1_data164_empty_n;
    end else begin
        img_1_data164_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        img_1_data164_read = 1'b1;
    end else begin
        img_1_data164_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        img_2_data165_blk_n = img_2_data165_full_n;
    end else begin
        img_2_data165_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        img_2_data165_write = 1'b1;
    end else begin
        img_2_data165_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_V_fu_153_p1 = img_1_data164_dout[7:0];

assign Cb_V_fu_234_p2 = (trunc_ln1_reg_400 ^ 8'd128);

assign Cr_V_fu_248_p2 = (trunc_ln1669_1_fu_239_p4 ^ 8'd128);

assign add_ln22_fu_142_p2 = (indvar_flatten_fu_82 + 64'd1);

assign and_ln40_1_fu_286_p2 = (icmp_ln1035_8_reg_420 & icmp_ln1027_102_reg_425);

assign and_ln40_2_fu_290_p2 = (and_ln40_fu_282_p2 & and_ln40_1_fu_286_p2);

assign and_ln40_fu_282_p2 = (icmp_ln1035_reg_410 & icmp_ln1027_reg_415);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((img_2_data165_full_n == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((img_1_data164_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((img_2_data165_full_n == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((img_1_data164_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((img_2_data165_full_n == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((img_1_data164_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (img_1_data164_empty_n == 1'b0);
end

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage0_iter7 = (img_2_data165_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign grp_fu_305_p0 = zext_ln1494_2_fu_177_p1;

assign grp_fu_305_p1 = 15'd85;

assign grp_fu_314_p0 = zext_ln1494_2_fu_177_p1;

assign grp_fu_314_p1 = 15'd107;

assign grp_fu_314_p2 = grp_fu_314_p20;

assign grp_fu_314_p20 = ret_V_13_fu_197_p3;

assign grp_fu_322_p0 = grp_fu_322_p00;

assign grp_fu_322_p00 = B_V_reg_367;

assign grp_fu_322_p1 = 13'd21;

assign icmp_ln1027_102_fu_277_p2 = (($signed(zext_ln1035_1_fu_268_p1) < $signed(cr_upper_load)) ? 1'b1 : 1'b0);

assign icmp_ln1027_fu_263_p2 = (($signed(zext_ln1035_fu_254_p1) < $signed(cb_upper_load)) ? 1'b1 : 1'b0);

assign icmp_ln1035_8_fu_272_p2 = (($signed(zext_ln1035_1_fu_268_p1) > $signed(cr_lower_load)) ? 1'b1 : 1'b0);

assign icmp_ln1035_fu_258_p2 = (($signed(zext_ln1035_fu_254_p1) > $signed(cb_lower_load)) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_137_p2 = ((indvar_flatten_fu_82 == bound) ? 1'b1 : 1'b0);

assign img_2_data165_din = ((and_ln40_2_fu_290_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign ret_V_10_fu_187_p0 = ret_V_10_fu_187_p00;

assign ret_V_10_fu_187_p00 = trunc_ln_reg_373_pp0_iter3_reg;

assign ret_V_10_fu_187_p1 = 15'd32725;

assign ret_V_12_fu_208_p3 = {{B_V_reg_367_pp0_iter4_reg}, {7'd0}};

assign ret_V_13_fu_197_p3 = {{trunc_ln_reg_373_pp0_iter3_reg}, {7'd0}};

assign ret_V_4_fu_219_p2 = ($signed(grp_fu_305_p3) + $signed(zext_ln1495_fu_215_p1));

assign tmp_fu_167_p4 = {{img_1_data164_dout[15:8]}};

assign trunc_ln1669_1_fu_239_p4 = {{grp_fu_322_p3[15:8]}};

assign zext_ln1035_1_fu_268_p1 = Cr_V_fu_248_p2;

assign zext_ln1035_fu_254_p1 = Cb_V_fu_234_p2;

assign zext_ln1494_2_fu_177_p1 = tmp_fu_167_p4;

assign zext_ln1495_fu_215_p1 = ret_V_12_fu_208_p3;

endmodule //color_analysis_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module color_analysis_ImgProcess_9_0_600_1024_1_2_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        img_1_data164_dout,
        img_1_data164_num_data_valid,
        img_1_data164_fifo_cap,
        img_1_data164_empty_n,
        img_1_data164_read,
        img_2_data165_din,
        img_2_data165_num_data_valid,
        img_2_data165_fifo_cap,
        img_2_data165_full_n,
        img_2_data165_write,
        cb_lower_dout,
        cb_lower_num_data_valid,
        cb_lower_fifo_cap,
        cb_lower_empty_n,
        cb_lower_read,
        cb_upper_dout,
        cb_upper_num_data_valid,
        cb_upper_fifo_cap,
        cb_upper_empty_n,
        cb_upper_read,
        cr_lower_dout,
        cr_lower_num_data_valid,
        cr_lower_fifo_cap,
        cr_lower_empty_n,
        cr_lower_read,
        cr_upper_dout,
        cr_upper_num_data_valid,
        cr_upper_fifo_cap,
        cr_upper_empty_n,
        cr_upper_read
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_read;
input  [31:0] p_read1;
input  [23:0] img_1_data164_dout;
input  [1:0] img_1_data164_num_data_valid;
input  [1:0] img_1_data164_fifo_cap;
input   img_1_data164_empty_n;
output   img_1_data164_read;
output  [7:0] img_2_data165_din;
input  [1:0] img_2_data165_num_data_valid;
input  [1:0] img_2_data165_fifo_cap;
input   img_2_data165_full_n;
output   img_2_data165_write;
input  [31:0] cb_lower_dout;
input  [3:0] cb_lower_num_data_valid;
input  [3:0] cb_lower_fifo_cap;
input   cb_lower_empty_n;
output   cb_lower_read;
input  [31:0] cb_upper_dout;
input  [3:0] cb_upper_num_data_valid;
input  [3:0] cb_upper_fifo_cap;
input   cb_upper_empty_n;
output   cb_upper_read;
input  [31:0] cr_lower_dout;
input  [3:0] cr_lower_num_data_valid;
input  [3:0] cr_lower_fifo_cap;
input   cr_lower_empty_n;
output   cr_lower_read;
input  [31:0] cr_upper_dout;
input  [3:0] cr_upper_num_data_valid;
input  [3:0] cr_upper_fifo_cap;
input   cr_upper_empty_n;
output   cr_upper_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_1_data164_read;
reg img_2_data165_write;
reg cb_lower_read;
reg cb_upper_read;
reg cr_lower_read;
reg cr_upper_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    cb_lower_blk_n;
wire    ap_CS_fsm_state3;
reg    cb_upper_blk_n;
reg    cr_lower_blk_n;
reg    cr_upper_blk_n;
wire    ap_CS_fsm_state2;
reg   [31:0] cr_upper_read_reg_125;
reg   [31:0] cr_lower_read_reg_130;
reg   [31:0] cb_upper_read_reg_135;
reg   [31:0] cb_lower_read_reg_140;
wire   [63:0] grp_fu_99_p2;
reg   [63:0] bound_reg_145;
wire    grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_ap_start;
wire    grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_ap_done;
wire    grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_ap_idle;
wire    grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_ap_ready;
wire    grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_img_1_data164_read;
wire   [7:0] grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_img_2_data165_din;
wire    grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_img_2_data165_write;
reg    grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_ap_start_reg;
reg   [4:0] ap_NS_fsm;
wire    ap_NS_fsm_state4;
wire    ap_CS_fsm_state5;
reg    ap_block_state1;
reg    ap_block_state3;
wire   [31:0] grp_fu_99_p0;
wire   [31:0] grp_fu_99_p1;
reg    grp_fu_99_ce;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire   [63:0] grp_fu_99_p00;
wire   [63:0] grp_fu_99_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_ap_start_reg = 1'b0;
end

color_analysis_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_ap_start),
    .ap_done(grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_ap_done),
    .ap_idle(grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_ap_idle),
    .ap_ready(grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_ap_ready),
    .img_1_data164_dout(img_1_data164_dout),
    .img_1_data164_num_data_valid(2'd0),
    .img_1_data164_fifo_cap(2'd0),
    .img_1_data164_empty_n(img_1_data164_empty_n),
    .img_1_data164_read(grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_img_1_data164_read),
    .img_2_data165_din(grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_img_2_data165_din),
    .img_2_data165_num_data_valid(2'd0),
    .img_2_data165_fifo_cap(2'd0),
    .img_2_data165_full_n(img_2_data165_full_n),
    .img_2_data165_write(grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_img_2_data165_write),
    .bound(bound_reg_145),
    .cb_lower_load(cb_lower_read_reg_140),
    .cb_upper_load(cb_upper_read_reg_135),
    .cr_lower_load(cr_lower_read_reg_130),
    .cr_upper_load(cr_upper_read_reg_125)
);

color_analysis_mul_32ns_32ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_2_1_U138(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_99_p0),
    .din1(grp_fu_99_p1),
    .ce(grp_fu_99_ce),
    .dout(grp_fu_99_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_ap_done == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_NS_fsm_state4))) begin
            grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_ap_start_reg <= 1'b1;
        end else if ((grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_ap_ready == 1'b1)) begin
            grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bound_reg_145 <= grp_fu_99_p2;
        cb_lower_read_reg_140 <= cb_lower_dout;
        cb_upper_read_reg_135 <= cb_upper_dout;
        cr_lower_read_reg_130 <= cr_lower_dout;
        cr_upper_read_reg_125 <= cr_upper_dout;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((cr_upper_empty_n == 1'b0) | (cr_lower_empty_n == 1'b0) | (cb_upper_empty_n == 1'b0) | (cb_lower_empty_n == 1'b0))) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cb_lower_blk_n = cb_lower_empty_n;
    end else begin
        cb_lower_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cr_upper_empty_n == 1'b0) | (cr_lower_empty_n == 1'b0) | (cb_upper_empty_n == 1'b0) | (cb_lower_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        cb_lower_read = 1'b1;
    end else begin
        cb_lower_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cb_upper_blk_n = cb_upper_empty_n;
    end else begin
        cb_upper_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cr_upper_empty_n == 1'b0) | (cr_lower_empty_n == 1'b0) | (cb_upper_empty_n == 1'b0) | (cb_lower_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        cb_upper_read = 1'b1;
    end else begin
        cb_upper_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cr_lower_blk_n = cr_lower_empty_n;
    end else begin
        cr_lower_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cr_upper_empty_n == 1'b0) | (cr_lower_empty_n == 1'b0) | (cb_upper_empty_n == 1'b0) | (cb_lower_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        cr_lower_read = 1'b1;
    end else begin
        cr_lower_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cr_upper_blk_n = cr_upper_empty_n;
    end else begin
        cr_upper_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cr_upper_empty_n == 1'b0) | (cr_lower_empty_n == 1'b0) | (cb_upper_empty_n == 1'b0) | (cb_lower_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        cr_upper_read = 1'b1;
    end else begin
        cr_upper_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((cr_upper_empty_n == 1'b0) | (cr_lower_empty_n == 1'b0) | (cb_upper_empty_n == 1'b0) | (cb_lower_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)))) begin
        grp_fu_99_ce = 1'b1;
    end else begin
        grp_fu_99_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        img_1_data164_read = grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_img_1_data164_read;
    end else begin
        img_1_data164_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        img_2_data165_write = grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_img_2_data165_write;
    end else begin
        img_2_data165_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if ((~((cr_upper_empty_n == 1'b0) | (cr_lower_empty_n == 1'b0) | (cb_upper_empty_n == 1'b0) | (cb_lower_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_NS_fsm_state4 = ap_NS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((cr_upper_empty_n == 1'b0) | (cr_lower_empty_n == 1'b0) | (cb_upper_empty_n == 1'b0) | (cb_lower_empty_n == 1'b0));
end

assign grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_ap_start = grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_ap_start_reg;

assign grp_fu_99_p0 = grp_fu_99_p00;

assign grp_fu_99_p00 = p_read;

assign grp_fu_99_p1 = grp_fu_99_p10;

assign grp_fu_99_p10 = p_read1;

assign img_2_data165_din = grp_ImgProcess_9_0_600_1024_1_2_Pipeline_loop_color_rows_loop_color_cols_fu_80_img_2_data165_din;

endmodule //color_analysis_ImgProcess_9_0_600_1024_1_2_s

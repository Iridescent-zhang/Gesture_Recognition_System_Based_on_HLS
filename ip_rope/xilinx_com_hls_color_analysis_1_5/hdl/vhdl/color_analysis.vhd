-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity color_analysis is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_VIDEO_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    OUTPUT_STREAM_VIDEO_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    OUTPUT_STREAM_VIDEO_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    OUTPUT_STREAM_VIDEO_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_VIDEO_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_VIDEO_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_VIDEO_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_DIP_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    OUTPUT_STREAM_DIP_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    OUTPUT_STREAM_DIP_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    OUTPUT_STREAM_DIP_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_DIP_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_DIP_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_DIP_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TVALID : IN STD_LOGIC;
    INPUT_STREAM_TREADY : OUT STD_LOGIC;
    OUTPUT_STREAM_VIDEO_TVALID : OUT STD_LOGIC;
    OUTPUT_STREAM_VIDEO_TREADY : IN STD_LOGIC;
    OUTPUT_STREAM_DIP_TVALID : OUT STD_LOGIC;
    OUTPUT_STREAM_DIP_TREADY : IN STD_LOGIC );
end;


architecture behav of color_analysis is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "color_analysis_color_analysis,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.268000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=12,HLS_SYN_DSP=0,HLS_SYN_FF=8486,HLS_SYN_LUT=11064,HLS_VERSION=2022_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal rows : STD_LOGIC_VECTOR (31 downto 0);
    signal cols : STD_LOGIC_VECTOR (31 downto 0);
    signal cb_lower : STD_LOGIC_VECTOR (31 downto 0);
    signal cb_upper : STD_LOGIC_VECTOR (31 downto 0);
    signal cr_lower : STD_LOGIC_VECTOR (31 downto 0);
    signal cr_upper : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_cb_lower_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_cb_lower_c_write : STD_LOGIC;
    signal entry_proc_U0_cb_upper_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_cb_upper_c_write : STD_LOGIC;
    signal entry_proc_U0_cr_lower_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_cr_lower_c_write : STD_LOGIC;
    signal entry_proc_U0_cr_upper_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_cr_upper_c_write : STD_LOGIC;
    signal Block_entry1_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry1_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry1_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry1_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry1_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry1_proc_U0_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry1_proc_U0_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry1_proc_U0_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry1_proc_U0_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry1_proc_U0_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry1_proc_U0_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry1_proc_U0_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry1_proc_U0_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry1_proc_U0_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry1_proc_U0_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry1_proc_U0_ap_return_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry1_proc_U0_ap_return_11 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry1_proc_U0_ap_return_12 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry1_proc_U0_ap_return_13 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry1_proc_U0_ap_return_14 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry1_proc_U0_ap_return_15 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry1_proc_U0_ap_return_16 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry1_proc_U0_ap_return_17 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_img_0_cols_c24_channel : STD_LOGIC;
    signal img_0_cols_c24_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_img_0_cols_c24_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_img_0_cols_c24_channel : STD_LOGIC;
    signal ap_channel_done_img_0_rows_c23_channel : STD_LOGIC;
    signal img_0_rows_c23_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_img_0_rows_c23_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_img_0_rows_c23_channel : STD_LOGIC;
    signal ap_channel_done_img_6_cols_channel : STD_LOGIC;
    signal img_6_cols_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_img_6_cols_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_img_6_cols_channel : STD_LOGIC;
    signal ap_channel_done_img_6_rows_channel : STD_LOGIC;
    signal img_6_rows_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_img_6_rows_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_img_6_rows_channel : STD_LOGIC;
    signal ap_channel_done_img_5_cols_channel : STD_LOGIC;
    signal img_5_cols_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_img_5_cols_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_img_5_cols_channel : STD_LOGIC;
    signal ap_channel_done_img_5_rows_channel : STD_LOGIC;
    signal img_5_rows_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_img_5_rows_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_img_5_rows_channel : STD_LOGIC;
    signal ap_channel_done_img_4b_cols_channel : STD_LOGIC;
    signal img_4b_cols_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_img_4b_cols_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_img_4b_cols_channel : STD_LOGIC;
    signal ap_channel_done_img_4b_rows_channel : STD_LOGIC;
    signal img_4b_rows_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_img_4b_rows_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_img_4b_rows_channel : STD_LOGIC;
    signal ap_channel_done_img_4a_cols_channel : STD_LOGIC;
    signal img_4a_cols_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_img_4a_cols_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_img_4a_cols_channel : STD_LOGIC;
    signal ap_channel_done_img_4a_rows_channel : STD_LOGIC;
    signal img_4a_rows_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_img_4a_rows_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_img_4a_rows_channel : STD_LOGIC;
    signal ap_channel_done_img_4_cols_channel : STD_LOGIC;
    signal img_4_cols_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_img_4_cols_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_img_4_cols_channel : STD_LOGIC;
    signal ap_channel_done_img_4_rows_channel : STD_LOGIC;
    signal img_4_rows_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_img_4_rows_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_img_4_rows_channel : STD_LOGIC;
    signal ap_channel_done_img_3_cols_channel : STD_LOGIC;
    signal img_3_cols_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_img_3_cols_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_img_3_cols_channel : STD_LOGIC;
    signal ap_channel_done_img_3_rows_channel : STD_LOGIC;
    signal img_3_rows_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_img_3_rows_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_img_3_rows_channel : STD_LOGIC;
    signal ap_channel_done_img_2_cols_channel : STD_LOGIC;
    signal img_2_cols_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_img_2_cols_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_img_2_cols_channel : STD_LOGIC;
    signal ap_channel_done_img_2_rows_channel : STD_LOGIC;
    signal img_2_rows_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_img_2_rows_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_img_2_rows_channel : STD_LOGIC;
    signal ap_channel_done_img_1_cols_channel : STD_LOGIC;
    signal img_1_cols_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_img_1_cols_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_img_1_cols_channel : STD_LOGIC;
    signal ap_channel_done_img_1_rows_channel : STD_LOGIC;
    signal img_1_rows_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_img_1_rows_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_img_1_rows_channel : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_600_1024_1_2_U0_ap_start : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_600_1024_1_2_U0_ap_done : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_600_1024_1_2_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_600_1024_1_2_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_600_1024_1_2_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_600_1024_1_2_U0_start_out : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_600_1024_1_2_U0_start_write : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_600_1024_1_2_U0_INPUT_STREAM_TREADY : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_data163_din : STD_LOGIC_VECTOR (23 downto 0);
    signal AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_data163_write : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_rows_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_rows_c_write : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_cols_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_cols_c_write : STD_LOGIC;
    signal medianBlur_3_1_9_600_1024_1_2_2_U0_ap_start : STD_LOGIC;
    signal medianBlur_3_1_9_600_1024_1_2_2_U0_ap_done : STD_LOGIC;
    signal medianBlur_3_1_9_600_1024_1_2_2_U0_ap_continue : STD_LOGIC;
    signal medianBlur_3_1_9_600_1024_1_2_2_U0_ap_idle : STD_LOGIC;
    signal medianBlur_3_1_9_600_1024_1_2_2_U0_ap_ready : STD_LOGIC;
    signal medianBlur_3_1_9_600_1024_1_2_2_U0_p_src_rows_read : STD_LOGIC;
    signal medianBlur_3_1_9_600_1024_1_2_2_U0_p_src_cols_read : STD_LOGIC;
    signal medianBlur_3_1_9_600_1024_1_2_2_U0_img_0_data163_read : STD_LOGIC;
    signal medianBlur_3_1_9_600_1024_1_2_2_U0_img_1_data164_din : STD_LOGIC_VECTOR (23 downto 0);
    signal medianBlur_3_1_9_600_1024_1_2_2_U0_img_1_data164_write : STD_LOGIC;
    signal ImgProcess_9_0_600_1024_1_2_U0_ap_start : STD_LOGIC;
    signal ImgProcess_9_0_600_1024_1_2_U0_ap_done : STD_LOGIC;
    signal ImgProcess_9_0_600_1024_1_2_U0_ap_continue : STD_LOGIC;
    signal ImgProcess_9_0_600_1024_1_2_U0_ap_idle : STD_LOGIC;
    signal ImgProcess_9_0_600_1024_1_2_U0_ap_ready : STD_LOGIC;
    signal ImgProcess_9_0_600_1024_1_2_U0_img_1_data164_read : STD_LOGIC;
    signal ImgProcess_9_0_600_1024_1_2_U0_img_2_data165_din : STD_LOGIC_VECTOR (7 downto 0);
    signal ImgProcess_9_0_600_1024_1_2_U0_img_2_data165_write : STD_LOGIC;
    signal ImgProcess_9_0_600_1024_1_2_U0_cb_lower_read : STD_LOGIC;
    signal ImgProcess_9_0_600_1024_1_2_U0_cb_upper_read : STD_LOGIC;
    signal ImgProcess_9_0_600_1024_1_2_U0_cr_lower_read : STD_LOGIC;
    signal ImgProcess_9_0_600_1024_1_2_U0_cr_upper_read : STD_LOGIC;
    signal erode_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_start : STD_LOGIC;
    signal erode_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_done : STD_LOGIC;
    signal erode_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_continue : STD_LOGIC;
    signal erode_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_idle : STD_LOGIC;
    signal erode_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_ready : STD_LOGIC;
    signal erode_0_0_600_1024_0_3_3_1_1_2_2_U0_img_2_data165_read : STD_LOGIC;
    signal erode_0_0_600_1024_0_3_3_1_1_2_2_U0_img_3_data166_din : STD_LOGIC_VECTOR (7 downto 0);
    signal erode_0_0_600_1024_0_3_3_1_1_2_2_U0_img_3_data166_write : STD_LOGIC;
    signal dilate_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_start : STD_LOGIC;
    signal dilate_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_done : STD_LOGIC;
    signal dilate_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_continue : STD_LOGIC;
    signal dilate_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_idle : STD_LOGIC;
    signal dilate_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_ready : STD_LOGIC;
    signal dilate_0_0_600_1024_0_3_3_1_1_2_2_U0_img_3_data166_read : STD_LOGIC;
    signal dilate_0_0_600_1024_0_3_3_1_1_2_2_U0_img_4_data167_din : STD_LOGIC_VECTOR (7 downto 0);
    signal dilate_0_0_600_1024_0_3_3_1_1_2_2_U0_img_4_data167_write : STD_LOGIC;
    signal duplicateMat_0_600_1024_1_2_2_2_U0_ap_start : STD_LOGIC;
    signal duplicateMat_0_600_1024_1_2_2_2_U0_ap_done : STD_LOGIC;
    signal duplicateMat_0_600_1024_1_2_2_2_U0_ap_continue : STD_LOGIC;
    signal duplicateMat_0_600_1024_1_2_2_2_U0_ap_idle : STD_LOGIC;
    signal duplicateMat_0_600_1024_1_2_2_2_U0_ap_ready : STD_LOGIC;
    signal duplicateMat_0_600_1024_1_2_2_2_U0_img_4_data167_read : STD_LOGIC;
    signal duplicateMat_0_600_1024_1_2_2_2_U0_img_4a_data168_din : STD_LOGIC_VECTOR (7 downto 0);
    signal duplicateMat_0_600_1024_1_2_2_2_U0_img_4a_data168_write : STD_LOGIC;
    signal duplicateMat_0_600_1024_1_2_2_2_U0_img_4b_data169_din : STD_LOGIC_VECTOR (7 downto 0);
    signal duplicateMat_0_600_1024_1_2_2_2_U0_img_4b_data169_write : STD_LOGIC;
    signal gray2rgb_0_9_600_1024_1_2_2_U0_ap_start : STD_LOGIC;
    signal gray2rgb_0_9_600_1024_1_2_2_U0_ap_done : STD_LOGIC;
    signal gray2rgb_0_9_600_1024_1_2_2_U0_ap_continue : STD_LOGIC;
    signal gray2rgb_0_9_600_1024_1_2_2_U0_ap_idle : STD_LOGIC;
    signal gray2rgb_0_9_600_1024_1_2_2_U0_ap_ready : STD_LOGIC;
    signal gray2rgb_0_9_600_1024_1_2_2_U0_img_4a_data168_read : STD_LOGIC;
    signal gray2rgb_0_9_600_1024_1_2_2_U0_img_5_data170_din : STD_LOGIC_VECTOR (23 downto 0);
    signal gray2rgb_0_9_600_1024_1_2_2_U0_img_5_data170_write : STD_LOGIC;
    signal gray2rgb_0_9_600_1024_1_2_2_1_U0_ap_start : STD_LOGIC;
    signal gray2rgb_0_9_600_1024_1_2_2_1_U0_ap_done : STD_LOGIC;
    signal gray2rgb_0_9_600_1024_1_2_2_1_U0_ap_continue : STD_LOGIC;
    signal gray2rgb_0_9_600_1024_1_2_2_1_U0_ap_idle : STD_LOGIC;
    signal gray2rgb_0_9_600_1024_1_2_2_1_U0_ap_ready : STD_LOGIC;
    signal gray2rgb_0_9_600_1024_1_2_2_1_U0_img_4b_data169_read : STD_LOGIC;
    signal gray2rgb_0_9_600_1024_1_2_2_1_U0_img_6_data171_din : STD_LOGIC_VECTOR (23 downto 0);
    signal gray2rgb_0_9_600_1024_1_2_2_1_U0_img_6_data171_write : STD_LOGIC;
    signal xfMat2AXIvideo_24_9_600_1024_1_2_U0_ap_start : STD_LOGIC;
    signal xfMat2AXIvideo_24_9_600_1024_1_2_U0_ap_done : STD_LOGIC;
    signal xfMat2AXIvideo_24_9_600_1024_1_2_U0_ap_continue : STD_LOGIC;
    signal xfMat2AXIvideo_24_9_600_1024_1_2_U0_ap_idle : STD_LOGIC;
    signal xfMat2AXIvideo_24_9_600_1024_1_2_U0_ap_ready : STD_LOGIC;
    signal xfMat2AXIvideo_24_9_600_1024_1_2_U0_img_5_data170_read : STD_LOGIC;
    signal xfMat2AXIvideo_24_9_600_1024_1_2_U0_OUTPUT_STREAM_VIDEO_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal xfMat2AXIvideo_24_9_600_1024_1_2_U0_OUTPUT_STREAM_VIDEO_TVALID : STD_LOGIC;
    signal xfMat2AXIvideo_24_9_600_1024_1_2_U0_OUTPUT_STREAM_VIDEO_TKEEP : STD_LOGIC_VECTOR (2 downto 0);
    signal xfMat2AXIvideo_24_9_600_1024_1_2_U0_OUTPUT_STREAM_VIDEO_TSTRB : STD_LOGIC_VECTOR (2 downto 0);
    signal xfMat2AXIvideo_24_9_600_1024_1_2_U0_OUTPUT_STREAM_VIDEO_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal xfMat2AXIvideo_24_9_600_1024_1_2_U0_OUTPUT_STREAM_VIDEO_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal xfMat2AXIvideo_24_9_600_1024_1_2_U0_OUTPUT_STREAM_VIDEO_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal xfMat2AXIvideo_24_9_600_1024_1_2_U0_OUTPUT_STREAM_VIDEO_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_ap_start : STD_LOGIC;
    signal xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_ap_done : STD_LOGIC;
    signal xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_ap_continue : STD_LOGIC;
    signal xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_ap_idle : STD_LOGIC;
    signal xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_ap_ready : STD_LOGIC;
    signal xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_img_6_data171_read : STD_LOGIC;
    signal xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_OUTPUT_STREAM_DIP_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_OUTPUT_STREAM_DIP_TVALID : STD_LOGIC;
    signal xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_OUTPUT_STREAM_DIP_TKEEP : STD_LOGIC_VECTOR (2 downto 0);
    signal xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_OUTPUT_STREAM_DIP_TSTRB : STD_LOGIC_VECTOR (2 downto 0);
    signal xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_OUTPUT_STREAM_DIP_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_OUTPUT_STREAM_DIP_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_OUTPUT_STREAM_DIP_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_OUTPUT_STREAM_DIP_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal cb_lower_c_full_n : STD_LOGIC;
    signal cb_lower_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cb_lower_c_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal cb_lower_c_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal cb_lower_c_empty_n : STD_LOGIC;
    signal cb_upper_c_full_n : STD_LOGIC;
    signal cb_upper_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cb_upper_c_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal cb_upper_c_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal cb_upper_c_empty_n : STD_LOGIC;
    signal cr_lower_c_full_n : STD_LOGIC;
    signal cr_lower_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cr_lower_c_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal cr_lower_c_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal cr_lower_c_empty_n : STD_LOGIC;
    signal cr_upper_c_full_n : STD_LOGIC;
    signal cr_upper_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cr_upper_c_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal cr_upper_c_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal cr_upper_c_empty_n : STD_LOGIC;
    signal img_1_rows_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_1_rows_channel_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal img_1_rows_channel_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal img_1_rows_channel_empty_n : STD_LOGIC;
    signal img_1_cols_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_1_cols_channel_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal img_1_cols_channel_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal img_1_cols_channel_empty_n : STD_LOGIC;
    signal img_2_rows_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_2_rows_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal img_2_rows_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal img_2_rows_channel_empty_n : STD_LOGIC;
    signal img_2_cols_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_2_cols_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal img_2_cols_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal img_2_cols_channel_empty_n : STD_LOGIC;
    signal img_3_rows_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_3_rows_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal img_3_rows_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal img_3_rows_channel_empty_n : STD_LOGIC;
    signal img_3_cols_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_3_cols_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal img_3_cols_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal img_3_cols_channel_empty_n : STD_LOGIC;
    signal img_4_rows_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_4_rows_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal img_4_rows_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal img_4_rows_channel_empty_n : STD_LOGIC;
    signal img_4_cols_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_4_cols_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal img_4_cols_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal img_4_cols_channel_empty_n : STD_LOGIC;
    signal img_4a_rows_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_4a_rows_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal img_4a_rows_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal img_4a_rows_channel_empty_n : STD_LOGIC;
    signal img_4a_cols_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_4a_cols_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal img_4a_cols_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal img_4a_cols_channel_empty_n : STD_LOGIC;
    signal img_4b_rows_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_4b_rows_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal img_4b_rows_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal img_4b_rows_channel_empty_n : STD_LOGIC;
    signal img_4b_cols_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_4b_cols_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal img_4b_cols_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal img_4b_cols_channel_empty_n : STD_LOGIC;
    signal img_5_rows_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_5_rows_channel_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal img_5_rows_channel_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal img_5_rows_channel_empty_n : STD_LOGIC;
    signal img_5_cols_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_5_cols_channel_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal img_5_cols_channel_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal img_5_cols_channel_empty_n : STD_LOGIC;
    signal img_6_rows_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_6_rows_channel_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal img_6_rows_channel_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal img_6_rows_channel_empty_n : STD_LOGIC;
    signal img_6_cols_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_6_cols_channel_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal img_6_cols_channel_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal img_6_cols_channel_empty_n : STD_LOGIC;
    signal img_0_rows_c23_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_0_rows_c23_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal img_0_rows_c23_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal img_0_rows_c23_channel_empty_n : STD_LOGIC;
    signal img_0_cols_c24_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_0_cols_c24_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal img_0_cols_c24_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal img_0_cols_c24_channel_empty_n : STD_LOGIC;
    signal img_0_data_full_n : STD_LOGIC;
    signal img_0_data_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal img_0_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal img_0_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal img_0_data_empty_n : STD_LOGIC;
    signal img_0_rows_c_full_n : STD_LOGIC;
    signal img_0_rows_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_0_rows_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal img_0_rows_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal img_0_rows_c_empty_n : STD_LOGIC;
    signal img_0_cols_c_full_n : STD_LOGIC;
    signal img_0_cols_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_0_cols_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal img_0_cols_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal img_0_cols_c_empty_n : STD_LOGIC;
    signal img_1_data_full_n : STD_LOGIC;
    signal img_1_data_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal img_1_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal img_1_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal img_1_data_empty_n : STD_LOGIC;
    signal img_2_data_full_n : STD_LOGIC;
    signal img_2_data_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_2_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal img_2_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal img_2_data_empty_n : STD_LOGIC;
    signal img_3_data_full_n : STD_LOGIC;
    signal img_3_data_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_3_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal img_3_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal img_3_data_empty_n : STD_LOGIC;
    signal img_4_data_full_n : STD_LOGIC;
    signal img_4_data_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_4_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal img_4_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal img_4_data_empty_n : STD_LOGIC;
    signal img_4a_data_full_n : STD_LOGIC;
    signal img_4a_data_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_4a_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal img_4a_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal img_4a_data_empty_n : STD_LOGIC;
    signal img_4b_data_full_n : STD_LOGIC;
    signal img_4b_data_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_4b_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal img_4b_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal img_4b_data_empty_n : STD_LOGIC;
    signal img_5_data_full_n : STD_LOGIC;
    signal img_5_data_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal img_5_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal img_5_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal img_5_data_empty_n : STD_LOGIC;
    signal img_6_data_full_n : STD_LOGIC;
    signal img_6_data_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal img_6_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal img_6_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal img_6_data_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_Block_entry1_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_entry1_proc_U0_ap_ready : STD_LOGIC;
    signal start_for_medianBlur_3_1_9_600_1024_1_2_2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_medianBlur_3_1_9_600_1024_1_2_2_U0_full_n : STD_LOGIC;
    signal start_for_medianBlur_3_1_9_600_1024_1_2_2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_medianBlur_3_1_9_600_1024_1_2_2_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component color_analysis_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cb_lower : IN STD_LOGIC_VECTOR (31 downto 0);
        cb_lower_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cb_lower_c_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        cb_lower_c_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        cb_lower_c_full_n : IN STD_LOGIC;
        cb_lower_c_write : OUT STD_LOGIC;
        cb_upper : IN STD_LOGIC_VECTOR (31 downto 0);
        cb_upper_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cb_upper_c_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        cb_upper_c_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        cb_upper_c_full_n : IN STD_LOGIC;
        cb_upper_c_write : OUT STD_LOGIC;
        cr_lower : IN STD_LOGIC_VECTOR (31 downto 0);
        cr_lower_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cr_lower_c_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        cr_lower_c_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        cr_lower_c_full_n : IN STD_LOGIC;
        cr_lower_c_write : OUT STD_LOGIC;
        cr_upper : IN STD_LOGIC_VECTOR (31 downto 0);
        cr_upper_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cr_upper_c_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        cr_upper_c_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        cr_upper_c_full_n : IN STD_LOGIC;
        cr_upper_c_write : OUT STD_LOGIC );
    end component;


    component color_analysis_Block_entry1_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        cols : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component color_analysis_AXIvideo2xfMat_24_9_600_1024_1_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        INPUT_STREAM_TVALID : IN STD_LOGIC;
        INPUT_STREAM_TREADY : OUT STD_LOGIC;
        INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        img_0_data163_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        img_0_data163_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_0_data163_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_0_data163_full_n : IN STD_LOGIC;
        img_0_data163_write : OUT STD_LOGIC;
        img_0_rows_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_0_rows_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_0_rows_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_0_rows_c_full_n : IN STD_LOGIC;
        img_0_rows_c_write : OUT STD_LOGIC;
        img_0_cols_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_0_cols_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_0_cols_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_0_cols_c_full_n : IN STD_LOGIC;
        img_0_cols_c_write : OUT STD_LOGIC );
    end component;


    component color_analysis_medianBlur_3_1_9_600_1024_1_2_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_rows_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        p_src_rows_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        p_src_rows_empty_n : IN STD_LOGIC;
        p_src_rows_read : OUT STD_LOGIC;
        p_src_cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_cols_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        p_src_cols_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        p_src_cols_empty_n : IN STD_LOGIC;
        p_src_cols_read : OUT STD_LOGIC;
        img_0_data163_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        img_0_data163_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_0_data163_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_0_data163_empty_n : IN STD_LOGIC;
        img_0_data163_read : OUT STD_LOGIC;
        img_1_data164_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        img_1_data164_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_1_data164_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_1_data164_full_n : IN STD_LOGIC;
        img_1_data164_write : OUT STD_LOGIC );
    end component;


    component color_analysis_ImgProcess_9_0_600_1024_1_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        img_1_data164_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        img_1_data164_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_1_data164_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_1_data164_empty_n : IN STD_LOGIC;
        img_1_data164_read : OUT STD_LOGIC;
        img_2_data165_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_2_data165_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_2_data165_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_2_data165_full_n : IN STD_LOGIC;
        img_2_data165_write : OUT STD_LOGIC;
        cb_lower_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cb_lower_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        cb_lower_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        cb_lower_empty_n : IN STD_LOGIC;
        cb_lower_read : OUT STD_LOGIC;
        cb_upper_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cb_upper_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        cb_upper_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        cb_upper_empty_n : IN STD_LOGIC;
        cb_upper_read : OUT STD_LOGIC;
        cr_lower_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cr_lower_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        cr_lower_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        cr_lower_empty_n : IN STD_LOGIC;
        cr_lower_read : OUT STD_LOGIC;
        cr_upper_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cr_upper_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        cr_upper_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        cr_upper_empty_n : IN STD_LOGIC;
        cr_upper_read : OUT STD_LOGIC );
    end component;


    component color_analysis_erode_0_0_600_1024_0_3_3_1_1_2_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        img_2_data165_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_2_data165_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_2_data165_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_2_data165_empty_n : IN STD_LOGIC;
        img_2_data165_read : OUT STD_LOGIC;
        img_3_data166_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_3_data166_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_3_data166_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_3_data166_full_n : IN STD_LOGIC;
        img_3_data166_write : OUT STD_LOGIC );
    end component;


    component color_analysis_dilate_0_0_600_1024_0_3_3_1_1_2_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        img_3_data166_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_3_data166_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_3_data166_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_3_data166_empty_n : IN STD_LOGIC;
        img_3_data166_read : OUT STD_LOGIC;
        img_4_data167_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_4_data167_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_4_data167_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_4_data167_full_n : IN STD_LOGIC;
        img_4_data167_write : OUT STD_LOGIC );
    end component;


    component color_analysis_duplicateMat_0_600_1024_1_2_2_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        img_4_data167_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_4_data167_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_4_data167_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_4_data167_empty_n : IN STD_LOGIC;
        img_4_data167_read : OUT STD_LOGIC;
        img_4a_data168_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_4a_data168_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_4a_data168_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_4a_data168_full_n : IN STD_LOGIC;
        img_4a_data168_write : OUT STD_LOGIC;
        img_4b_data169_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_4b_data169_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_4b_data169_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_4b_data169_full_n : IN STD_LOGIC;
        img_4b_data169_write : OUT STD_LOGIC );
    end component;


    component color_analysis_gray2rgb_0_9_600_1024_1_2_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        img_4a_data168_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_4a_data168_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_4a_data168_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_4a_data168_empty_n : IN STD_LOGIC;
        img_4a_data168_read : OUT STD_LOGIC;
        img_5_data170_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        img_5_data170_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_5_data170_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_5_data170_full_n : IN STD_LOGIC;
        img_5_data170_write : OUT STD_LOGIC );
    end component;


    component color_analysis_gray2rgb_0_9_600_1024_1_2_2_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        img_4b_data169_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_4b_data169_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_4b_data169_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_4b_data169_empty_n : IN STD_LOGIC;
        img_4b_data169_read : OUT STD_LOGIC;
        img_6_data171_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        img_6_data171_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_6_data171_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_6_data171_full_n : IN STD_LOGIC;
        img_6_data171_write : OUT STD_LOGIC );
    end component;


    component color_analysis_xfMat2AXIvideo_24_9_600_1024_1_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        img_5_data170_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        img_5_data170_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_5_data170_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_5_data170_empty_n : IN STD_LOGIC;
        img_5_data170_read : OUT STD_LOGIC;
        OUTPUT_STREAM_VIDEO_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        OUTPUT_STREAM_VIDEO_TVALID : OUT STD_LOGIC;
        OUTPUT_STREAM_VIDEO_TREADY : IN STD_LOGIC;
        OUTPUT_STREAM_VIDEO_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
        OUTPUT_STREAM_VIDEO_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
        OUTPUT_STREAM_VIDEO_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_VIDEO_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_VIDEO_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_VIDEO_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component color_analysis_xfMat2AXIvideo_24_9_600_1024_1_2_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        img_6_data171_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        img_6_data171_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_6_data171_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_6_data171_empty_n : IN STD_LOGIC;
        img_6_data171_read : OUT STD_LOGIC;
        OUTPUT_STREAM_DIP_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        OUTPUT_STREAM_DIP_TVALID : OUT STD_LOGIC;
        OUTPUT_STREAM_DIP_TREADY : IN STD_LOGIC;
        OUTPUT_STREAM_DIP_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
        OUTPUT_STREAM_DIP_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
        OUTPUT_STREAM_DIP_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_DIP_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_DIP_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_DIP_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component color_analysis_fifo_w32_d5_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component color_analysis_fifo_w32_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component color_analysis_fifo_w32_d6_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component color_analysis_fifo_w32_d7_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component color_analysis_fifo_w32_d8_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component color_analysis_fifo_w32_d9_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component color_analysis_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component color_analysis_fifo_w24_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (23 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (23 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component color_analysis_fifo_w8_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component color_analysis_start_for_medianBlur_3_1_9_600_1024_1_2_2_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component color_analysis_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        rows : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols : OUT STD_LOGIC_VECTOR (31 downto 0);
        cb_lower : OUT STD_LOGIC_VECTOR (31 downto 0);
        cb_upper : OUT STD_LOGIC_VECTOR (31 downto 0);
        cr_lower : OUT STD_LOGIC_VECTOR (31 downto 0);
        cr_upper : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    CONTROL_BUS_s_axi_U : component color_analysis_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        rows => rows,
        cols => cols,
        cb_lower => cb_lower,
        cb_upper => cb_upper,
        cr_lower => cr_lower,
        cr_upper => cr_upper,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    entry_proc_U0 : component color_analysis_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => entry_proc_U0_ap_start,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        cb_lower => cb_lower,
        cb_lower_c_din => entry_proc_U0_cb_lower_c_din,
        cb_lower_c_num_data_valid => cb_lower_c_num_data_valid,
        cb_lower_c_fifo_cap => cb_lower_c_fifo_cap,
        cb_lower_c_full_n => cb_lower_c_full_n,
        cb_lower_c_write => entry_proc_U0_cb_lower_c_write,
        cb_upper => cb_upper,
        cb_upper_c_din => entry_proc_U0_cb_upper_c_din,
        cb_upper_c_num_data_valid => cb_upper_c_num_data_valid,
        cb_upper_c_fifo_cap => cb_upper_c_fifo_cap,
        cb_upper_c_full_n => cb_upper_c_full_n,
        cb_upper_c_write => entry_proc_U0_cb_upper_c_write,
        cr_lower => cr_lower,
        cr_lower_c_din => entry_proc_U0_cr_lower_c_din,
        cr_lower_c_num_data_valid => cr_lower_c_num_data_valid,
        cr_lower_c_fifo_cap => cr_lower_c_fifo_cap,
        cr_lower_c_full_n => cr_lower_c_full_n,
        cr_lower_c_write => entry_proc_U0_cr_lower_c_write,
        cr_upper => cr_upper,
        cr_upper_c_din => entry_proc_U0_cr_upper_c_din,
        cr_upper_c_num_data_valid => cr_upper_c_num_data_valid,
        cr_upper_c_fifo_cap => cr_upper_c_fifo_cap,
        cr_upper_c_full_n => cr_upper_c_full_n,
        cr_upper_c_write => entry_proc_U0_cr_upper_c_write);

    Block_entry1_proc_U0 : component color_analysis_Block_entry1_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_entry1_proc_U0_ap_start,
        ap_done => Block_entry1_proc_U0_ap_done,
        ap_continue => Block_entry1_proc_U0_ap_continue,
        ap_idle => Block_entry1_proc_U0_ap_idle,
        ap_ready => Block_entry1_proc_U0_ap_ready,
        rows => rows,
        cols => cols,
        ap_return_0 => Block_entry1_proc_U0_ap_return_0,
        ap_return_1 => Block_entry1_proc_U0_ap_return_1,
        ap_return_2 => Block_entry1_proc_U0_ap_return_2,
        ap_return_3 => Block_entry1_proc_U0_ap_return_3,
        ap_return_4 => Block_entry1_proc_U0_ap_return_4,
        ap_return_5 => Block_entry1_proc_U0_ap_return_5,
        ap_return_6 => Block_entry1_proc_U0_ap_return_6,
        ap_return_7 => Block_entry1_proc_U0_ap_return_7,
        ap_return_8 => Block_entry1_proc_U0_ap_return_8,
        ap_return_9 => Block_entry1_proc_U0_ap_return_9,
        ap_return_10 => Block_entry1_proc_U0_ap_return_10,
        ap_return_11 => Block_entry1_proc_U0_ap_return_11,
        ap_return_12 => Block_entry1_proc_U0_ap_return_12,
        ap_return_13 => Block_entry1_proc_U0_ap_return_13,
        ap_return_14 => Block_entry1_proc_U0_ap_return_14,
        ap_return_15 => Block_entry1_proc_U0_ap_return_15,
        ap_return_16 => Block_entry1_proc_U0_ap_return_16,
        ap_return_17 => Block_entry1_proc_U0_ap_return_17);

    AXIvideo2xfMat_24_9_600_1024_1_2_U0 : component color_analysis_AXIvideo2xfMat_24_9_600_1024_1_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIvideo2xfMat_24_9_600_1024_1_2_U0_ap_start,
        start_full_n => start_for_medianBlur_3_1_9_600_1024_1_2_2_U0_full_n,
        ap_done => AXIvideo2xfMat_24_9_600_1024_1_2_U0_ap_done,
        ap_continue => AXIvideo2xfMat_24_9_600_1024_1_2_U0_ap_continue,
        ap_idle => AXIvideo2xfMat_24_9_600_1024_1_2_U0_ap_idle,
        ap_ready => AXIvideo2xfMat_24_9_600_1024_1_2_U0_ap_ready,
        start_out => AXIvideo2xfMat_24_9_600_1024_1_2_U0_start_out,
        start_write => AXIvideo2xfMat_24_9_600_1024_1_2_U0_start_write,
        INPUT_STREAM_TDATA => INPUT_STREAM_TDATA,
        INPUT_STREAM_TVALID => INPUT_STREAM_TVALID,
        INPUT_STREAM_TREADY => AXIvideo2xfMat_24_9_600_1024_1_2_U0_INPUT_STREAM_TREADY,
        INPUT_STREAM_TKEEP => INPUT_STREAM_TKEEP,
        INPUT_STREAM_TSTRB => INPUT_STREAM_TSTRB,
        INPUT_STREAM_TUSER => INPUT_STREAM_TUSER,
        INPUT_STREAM_TLAST => INPUT_STREAM_TLAST,
        INPUT_STREAM_TID => INPUT_STREAM_TID,
        INPUT_STREAM_TDEST => INPUT_STREAM_TDEST,
        p_read => img_0_rows_c23_channel_dout,
        p_read1 => img_0_cols_c24_channel_dout,
        img_0_data163_din => AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_data163_din,
        img_0_data163_num_data_valid => img_0_data_num_data_valid,
        img_0_data163_fifo_cap => img_0_data_fifo_cap,
        img_0_data163_full_n => img_0_data_full_n,
        img_0_data163_write => AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_data163_write,
        img_0_rows_c_din => AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_rows_c_din,
        img_0_rows_c_num_data_valid => img_0_rows_c_num_data_valid,
        img_0_rows_c_fifo_cap => img_0_rows_c_fifo_cap,
        img_0_rows_c_full_n => img_0_rows_c_full_n,
        img_0_rows_c_write => AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_rows_c_write,
        img_0_cols_c_din => AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_cols_c_din,
        img_0_cols_c_num_data_valid => img_0_cols_c_num_data_valid,
        img_0_cols_c_fifo_cap => img_0_cols_c_fifo_cap,
        img_0_cols_c_full_n => img_0_cols_c_full_n,
        img_0_cols_c_write => AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_cols_c_write);

    medianBlur_3_1_9_600_1024_1_2_2_U0 : component color_analysis_medianBlur_3_1_9_600_1024_1_2_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => medianBlur_3_1_9_600_1024_1_2_2_U0_ap_start,
        ap_done => medianBlur_3_1_9_600_1024_1_2_2_U0_ap_done,
        ap_continue => medianBlur_3_1_9_600_1024_1_2_2_U0_ap_continue,
        ap_idle => medianBlur_3_1_9_600_1024_1_2_2_U0_ap_idle,
        ap_ready => medianBlur_3_1_9_600_1024_1_2_2_U0_ap_ready,
        p_src_rows_dout => img_0_rows_c_dout,
        p_src_rows_num_data_valid => img_0_rows_c_num_data_valid,
        p_src_rows_fifo_cap => img_0_rows_c_fifo_cap,
        p_src_rows_empty_n => img_0_rows_c_empty_n,
        p_src_rows_read => medianBlur_3_1_9_600_1024_1_2_2_U0_p_src_rows_read,
        p_src_cols_dout => img_0_cols_c_dout,
        p_src_cols_num_data_valid => img_0_cols_c_num_data_valid,
        p_src_cols_fifo_cap => img_0_cols_c_fifo_cap,
        p_src_cols_empty_n => img_0_cols_c_empty_n,
        p_src_cols_read => medianBlur_3_1_9_600_1024_1_2_2_U0_p_src_cols_read,
        img_0_data163_dout => img_0_data_dout,
        img_0_data163_num_data_valid => img_0_data_num_data_valid,
        img_0_data163_fifo_cap => img_0_data_fifo_cap,
        img_0_data163_empty_n => img_0_data_empty_n,
        img_0_data163_read => medianBlur_3_1_9_600_1024_1_2_2_U0_img_0_data163_read,
        img_1_data164_din => medianBlur_3_1_9_600_1024_1_2_2_U0_img_1_data164_din,
        img_1_data164_num_data_valid => img_1_data_num_data_valid,
        img_1_data164_fifo_cap => img_1_data_fifo_cap,
        img_1_data164_full_n => img_1_data_full_n,
        img_1_data164_write => medianBlur_3_1_9_600_1024_1_2_2_U0_img_1_data164_write);

    ImgProcess_9_0_600_1024_1_2_U0 : component color_analysis_ImgProcess_9_0_600_1024_1_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ImgProcess_9_0_600_1024_1_2_U0_ap_start,
        ap_done => ImgProcess_9_0_600_1024_1_2_U0_ap_done,
        ap_continue => ImgProcess_9_0_600_1024_1_2_U0_ap_continue,
        ap_idle => ImgProcess_9_0_600_1024_1_2_U0_ap_idle,
        ap_ready => ImgProcess_9_0_600_1024_1_2_U0_ap_ready,
        p_read => img_1_rows_channel_dout,
        p_read1 => img_1_cols_channel_dout,
        img_1_data164_dout => img_1_data_dout,
        img_1_data164_num_data_valid => img_1_data_num_data_valid,
        img_1_data164_fifo_cap => img_1_data_fifo_cap,
        img_1_data164_empty_n => img_1_data_empty_n,
        img_1_data164_read => ImgProcess_9_0_600_1024_1_2_U0_img_1_data164_read,
        img_2_data165_din => ImgProcess_9_0_600_1024_1_2_U0_img_2_data165_din,
        img_2_data165_num_data_valid => img_2_data_num_data_valid,
        img_2_data165_fifo_cap => img_2_data_fifo_cap,
        img_2_data165_full_n => img_2_data_full_n,
        img_2_data165_write => ImgProcess_9_0_600_1024_1_2_U0_img_2_data165_write,
        cb_lower_dout => cb_lower_c_dout,
        cb_lower_num_data_valid => cb_lower_c_num_data_valid,
        cb_lower_fifo_cap => cb_lower_c_fifo_cap,
        cb_lower_empty_n => cb_lower_c_empty_n,
        cb_lower_read => ImgProcess_9_0_600_1024_1_2_U0_cb_lower_read,
        cb_upper_dout => cb_upper_c_dout,
        cb_upper_num_data_valid => cb_upper_c_num_data_valid,
        cb_upper_fifo_cap => cb_upper_c_fifo_cap,
        cb_upper_empty_n => cb_upper_c_empty_n,
        cb_upper_read => ImgProcess_9_0_600_1024_1_2_U0_cb_upper_read,
        cr_lower_dout => cr_lower_c_dout,
        cr_lower_num_data_valid => cr_lower_c_num_data_valid,
        cr_lower_fifo_cap => cr_lower_c_fifo_cap,
        cr_lower_empty_n => cr_lower_c_empty_n,
        cr_lower_read => ImgProcess_9_0_600_1024_1_2_U0_cr_lower_read,
        cr_upper_dout => cr_upper_c_dout,
        cr_upper_num_data_valid => cr_upper_c_num_data_valid,
        cr_upper_fifo_cap => cr_upper_c_fifo_cap,
        cr_upper_empty_n => cr_upper_c_empty_n,
        cr_upper_read => ImgProcess_9_0_600_1024_1_2_U0_cr_upper_read);

    erode_0_0_600_1024_0_3_3_1_1_2_2_U0 : component color_analysis_erode_0_0_600_1024_0_3_3_1_1_2_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => erode_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_start,
        ap_done => erode_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_done,
        ap_continue => erode_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_continue,
        ap_idle => erode_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_idle,
        ap_ready => erode_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_ready,
        p_read => img_2_rows_channel_dout,
        p_read1 => img_2_cols_channel_dout,
        img_2_data165_dout => img_2_data_dout,
        img_2_data165_num_data_valid => img_2_data_num_data_valid,
        img_2_data165_fifo_cap => img_2_data_fifo_cap,
        img_2_data165_empty_n => img_2_data_empty_n,
        img_2_data165_read => erode_0_0_600_1024_0_3_3_1_1_2_2_U0_img_2_data165_read,
        img_3_data166_din => erode_0_0_600_1024_0_3_3_1_1_2_2_U0_img_3_data166_din,
        img_3_data166_num_data_valid => img_3_data_num_data_valid,
        img_3_data166_fifo_cap => img_3_data_fifo_cap,
        img_3_data166_full_n => img_3_data_full_n,
        img_3_data166_write => erode_0_0_600_1024_0_3_3_1_1_2_2_U0_img_3_data166_write);

    dilate_0_0_600_1024_0_3_3_1_1_2_2_U0 : component color_analysis_dilate_0_0_600_1024_0_3_3_1_1_2_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => dilate_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_start,
        ap_done => dilate_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_done,
        ap_continue => dilate_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_continue,
        ap_idle => dilate_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_idle,
        ap_ready => dilate_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_ready,
        p_read => img_3_rows_channel_dout,
        p_read1 => img_3_cols_channel_dout,
        img_3_data166_dout => img_3_data_dout,
        img_3_data166_num_data_valid => img_3_data_num_data_valid,
        img_3_data166_fifo_cap => img_3_data_fifo_cap,
        img_3_data166_empty_n => img_3_data_empty_n,
        img_3_data166_read => dilate_0_0_600_1024_0_3_3_1_1_2_2_U0_img_3_data166_read,
        img_4_data167_din => dilate_0_0_600_1024_0_3_3_1_1_2_2_U0_img_4_data167_din,
        img_4_data167_num_data_valid => img_4_data_num_data_valid,
        img_4_data167_fifo_cap => img_4_data_fifo_cap,
        img_4_data167_full_n => img_4_data_full_n,
        img_4_data167_write => dilate_0_0_600_1024_0_3_3_1_1_2_2_U0_img_4_data167_write);

    duplicateMat_0_600_1024_1_2_2_2_U0 : component color_analysis_duplicateMat_0_600_1024_1_2_2_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => duplicateMat_0_600_1024_1_2_2_2_U0_ap_start,
        ap_done => duplicateMat_0_600_1024_1_2_2_2_U0_ap_done,
        ap_continue => duplicateMat_0_600_1024_1_2_2_2_U0_ap_continue,
        ap_idle => duplicateMat_0_600_1024_1_2_2_2_U0_ap_idle,
        ap_ready => duplicateMat_0_600_1024_1_2_2_2_U0_ap_ready,
        p_read => img_4_rows_channel_dout,
        p_read1 => img_4_cols_channel_dout,
        img_4_data167_dout => img_4_data_dout,
        img_4_data167_num_data_valid => img_4_data_num_data_valid,
        img_4_data167_fifo_cap => img_4_data_fifo_cap,
        img_4_data167_empty_n => img_4_data_empty_n,
        img_4_data167_read => duplicateMat_0_600_1024_1_2_2_2_U0_img_4_data167_read,
        img_4a_data168_din => duplicateMat_0_600_1024_1_2_2_2_U0_img_4a_data168_din,
        img_4a_data168_num_data_valid => img_4a_data_num_data_valid,
        img_4a_data168_fifo_cap => img_4a_data_fifo_cap,
        img_4a_data168_full_n => img_4a_data_full_n,
        img_4a_data168_write => duplicateMat_0_600_1024_1_2_2_2_U0_img_4a_data168_write,
        img_4b_data169_din => duplicateMat_0_600_1024_1_2_2_2_U0_img_4b_data169_din,
        img_4b_data169_num_data_valid => img_4b_data_num_data_valid,
        img_4b_data169_fifo_cap => img_4b_data_fifo_cap,
        img_4b_data169_full_n => img_4b_data_full_n,
        img_4b_data169_write => duplicateMat_0_600_1024_1_2_2_2_U0_img_4b_data169_write);

    gray2rgb_0_9_600_1024_1_2_2_U0 : component color_analysis_gray2rgb_0_9_600_1024_1_2_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => gray2rgb_0_9_600_1024_1_2_2_U0_ap_start,
        ap_done => gray2rgb_0_9_600_1024_1_2_2_U0_ap_done,
        ap_continue => gray2rgb_0_9_600_1024_1_2_2_U0_ap_continue,
        ap_idle => gray2rgb_0_9_600_1024_1_2_2_U0_ap_idle,
        ap_ready => gray2rgb_0_9_600_1024_1_2_2_U0_ap_ready,
        p_read => img_4a_rows_channel_dout,
        p_read1 => img_4a_cols_channel_dout,
        img_4a_data168_dout => img_4a_data_dout,
        img_4a_data168_num_data_valid => img_4a_data_num_data_valid,
        img_4a_data168_fifo_cap => img_4a_data_fifo_cap,
        img_4a_data168_empty_n => img_4a_data_empty_n,
        img_4a_data168_read => gray2rgb_0_9_600_1024_1_2_2_U0_img_4a_data168_read,
        img_5_data170_din => gray2rgb_0_9_600_1024_1_2_2_U0_img_5_data170_din,
        img_5_data170_num_data_valid => img_5_data_num_data_valid,
        img_5_data170_fifo_cap => img_5_data_fifo_cap,
        img_5_data170_full_n => img_5_data_full_n,
        img_5_data170_write => gray2rgb_0_9_600_1024_1_2_2_U0_img_5_data170_write);

    gray2rgb_0_9_600_1024_1_2_2_1_U0 : component color_analysis_gray2rgb_0_9_600_1024_1_2_2_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => gray2rgb_0_9_600_1024_1_2_2_1_U0_ap_start,
        ap_done => gray2rgb_0_9_600_1024_1_2_2_1_U0_ap_done,
        ap_continue => gray2rgb_0_9_600_1024_1_2_2_1_U0_ap_continue,
        ap_idle => gray2rgb_0_9_600_1024_1_2_2_1_U0_ap_idle,
        ap_ready => gray2rgb_0_9_600_1024_1_2_2_1_U0_ap_ready,
        p_read => img_4b_rows_channel_dout,
        p_read1 => img_4b_cols_channel_dout,
        img_4b_data169_dout => img_4b_data_dout,
        img_4b_data169_num_data_valid => img_4b_data_num_data_valid,
        img_4b_data169_fifo_cap => img_4b_data_fifo_cap,
        img_4b_data169_empty_n => img_4b_data_empty_n,
        img_4b_data169_read => gray2rgb_0_9_600_1024_1_2_2_1_U0_img_4b_data169_read,
        img_6_data171_din => gray2rgb_0_9_600_1024_1_2_2_1_U0_img_6_data171_din,
        img_6_data171_num_data_valid => img_6_data_num_data_valid,
        img_6_data171_fifo_cap => img_6_data_fifo_cap,
        img_6_data171_full_n => img_6_data_full_n,
        img_6_data171_write => gray2rgb_0_9_600_1024_1_2_2_1_U0_img_6_data171_write);

    xfMat2AXIvideo_24_9_600_1024_1_2_U0 : component color_analysis_xfMat2AXIvideo_24_9_600_1024_1_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => xfMat2AXIvideo_24_9_600_1024_1_2_U0_ap_start,
        ap_done => xfMat2AXIvideo_24_9_600_1024_1_2_U0_ap_done,
        ap_continue => xfMat2AXIvideo_24_9_600_1024_1_2_U0_ap_continue,
        ap_idle => xfMat2AXIvideo_24_9_600_1024_1_2_U0_ap_idle,
        ap_ready => xfMat2AXIvideo_24_9_600_1024_1_2_U0_ap_ready,
        p_read => img_5_rows_channel_dout,
        p_read1 => img_5_cols_channel_dout,
        img_5_data170_dout => img_5_data_dout,
        img_5_data170_num_data_valid => img_5_data_num_data_valid,
        img_5_data170_fifo_cap => img_5_data_fifo_cap,
        img_5_data170_empty_n => img_5_data_empty_n,
        img_5_data170_read => xfMat2AXIvideo_24_9_600_1024_1_2_U0_img_5_data170_read,
        OUTPUT_STREAM_VIDEO_TDATA => xfMat2AXIvideo_24_9_600_1024_1_2_U0_OUTPUT_STREAM_VIDEO_TDATA,
        OUTPUT_STREAM_VIDEO_TVALID => xfMat2AXIvideo_24_9_600_1024_1_2_U0_OUTPUT_STREAM_VIDEO_TVALID,
        OUTPUT_STREAM_VIDEO_TREADY => OUTPUT_STREAM_VIDEO_TREADY,
        OUTPUT_STREAM_VIDEO_TKEEP => xfMat2AXIvideo_24_9_600_1024_1_2_U0_OUTPUT_STREAM_VIDEO_TKEEP,
        OUTPUT_STREAM_VIDEO_TSTRB => xfMat2AXIvideo_24_9_600_1024_1_2_U0_OUTPUT_STREAM_VIDEO_TSTRB,
        OUTPUT_STREAM_VIDEO_TUSER => xfMat2AXIvideo_24_9_600_1024_1_2_U0_OUTPUT_STREAM_VIDEO_TUSER,
        OUTPUT_STREAM_VIDEO_TLAST => xfMat2AXIvideo_24_9_600_1024_1_2_U0_OUTPUT_STREAM_VIDEO_TLAST,
        OUTPUT_STREAM_VIDEO_TID => xfMat2AXIvideo_24_9_600_1024_1_2_U0_OUTPUT_STREAM_VIDEO_TID,
        OUTPUT_STREAM_VIDEO_TDEST => xfMat2AXIvideo_24_9_600_1024_1_2_U0_OUTPUT_STREAM_VIDEO_TDEST);

    xfMat2AXIvideo_24_9_600_1024_1_2_2_U0 : component color_analysis_xfMat2AXIvideo_24_9_600_1024_1_2_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_ap_start,
        ap_done => xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_ap_done,
        ap_continue => xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_ap_continue,
        ap_idle => xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_ap_idle,
        ap_ready => xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_ap_ready,
        p_read => img_6_rows_channel_dout,
        p_read1 => img_6_cols_channel_dout,
        img_6_data171_dout => img_6_data_dout,
        img_6_data171_num_data_valid => img_6_data_num_data_valid,
        img_6_data171_fifo_cap => img_6_data_fifo_cap,
        img_6_data171_empty_n => img_6_data_empty_n,
        img_6_data171_read => xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_img_6_data171_read,
        OUTPUT_STREAM_DIP_TDATA => xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_OUTPUT_STREAM_DIP_TDATA,
        OUTPUT_STREAM_DIP_TVALID => xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_OUTPUT_STREAM_DIP_TVALID,
        OUTPUT_STREAM_DIP_TREADY => OUTPUT_STREAM_DIP_TREADY,
        OUTPUT_STREAM_DIP_TKEEP => xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_OUTPUT_STREAM_DIP_TKEEP,
        OUTPUT_STREAM_DIP_TSTRB => xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_OUTPUT_STREAM_DIP_TSTRB,
        OUTPUT_STREAM_DIP_TUSER => xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_OUTPUT_STREAM_DIP_TUSER,
        OUTPUT_STREAM_DIP_TLAST => xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_OUTPUT_STREAM_DIP_TLAST,
        OUTPUT_STREAM_DIP_TID => xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_OUTPUT_STREAM_DIP_TID,
        OUTPUT_STREAM_DIP_TDEST => xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_OUTPUT_STREAM_DIP_TDEST);

    cb_lower_c_U : component color_analysis_fifo_w32_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_cb_lower_c_din,
        if_full_n => cb_lower_c_full_n,
        if_write => entry_proc_U0_cb_lower_c_write,
        if_dout => cb_lower_c_dout,
        if_num_data_valid => cb_lower_c_num_data_valid,
        if_fifo_cap => cb_lower_c_fifo_cap,
        if_empty_n => cb_lower_c_empty_n,
        if_read => ImgProcess_9_0_600_1024_1_2_U0_cb_lower_read);

    cb_upper_c_U : component color_analysis_fifo_w32_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_cb_upper_c_din,
        if_full_n => cb_upper_c_full_n,
        if_write => entry_proc_U0_cb_upper_c_write,
        if_dout => cb_upper_c_dout,
        if_num_data_valid => cb_upper_c_num_data_valid,
        if_fifo_cap => cb_upper_c_fifo_cap,
        if_empty_n => cb_upper_c_empty_n,
        if_read => ImgProcess_9_0_600_1024_1_2_U0_cb_upper_read);

    cr_lower_c_U : component color_analysis_fifo_w32_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_cr_lower_c_din,
        if_full_n => cr_lower_c_full_n,
        if_write => entry_proc_U0_cr_lower_c_write,
        if_dout => cr_lower_c_dout,
        if_num_data_valid => cr_lower_c_num_data_valid,
        if_fifo_cap => cr_lower_c_fifo_cap,
        if_empty_n => cr_lower_c_empty_n,
        if_read => ImgProcess_9_0_600_1024_1_2_U0_cr_lower_read);

    cr_upper_c_U : component color_analysis_fifo_w32_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_cr_upper_c_din,
        if_full_n => cr_upper_c_full_n,
        if_write => entry_proc_U0_cr_upper_c_write,
        if_dout => cr_upper_c_dout,
        if_num_data_valid => cr_upper_c_num_data_valid,
        if_fifo_cap => cr_upper_c_fifo_cap,
        if_empty_n => cr_upper_c_empty_n,
        if_read => ImgProcess_9_0_600_1024_1_2_U0_cr_upper_read);

    img_1_rows_channel_U : component color_analysis_fifo_w32_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry1_proc_U0_ap_return_0,
        if_full_n => img_1_rows_channel_full_n,
        if_write => ap_channel_done_img_1_rows_channel,
        if_dout => img_1_rows_channel_dout,
        if_num_data_valid => img_1_rows_channel_num_data_valid,
        if_fifo_cap => img_1_rows_channel_fifo_cap,
        if_empty_n => img_1_rows_channel_empty_n,
        if_read => ImgProcess_9_0_600_1024_1_2_U0_ap_ready);

    img_1_cols_channel_U : component color_analysis_fifo_w32_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry1_proc_U0_ap_return_1,
        if_full_n => img_1_cols_channel_full_n,
        if_write => ap_channel_done_img_1_cols_channel,
        if_dout => img_1_cols_channel_dout,
        if_num_data_valid => img_1_cols_channel_num_data_valid,
        if_fifo_cap => img_1_cols_channel_fifo_cap,
        if_empty_n => img_1_cols_channel_empty_n,
        if_read => ImgProcess_9_0_600_1024_1_2_U0_ap_ready);

    img_2_rows_channel_U : component color_analysis_fifo_w32_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry1_proc_U0_ap_return_2,
        if_full_n => img_2_rows_channel_full_n,
        if_write => ap_channel_done_img_2_rows_channel,
        if_dout => img_2_rows_channel_dout,
        if_num_data_valid => img_2_rows_channel_num_data_valid,
        if_fifo_cap => img_2_rows_channel_fifo_cap,
        if_empty_n => img_2_rows_channel_empty_n,
        if_read => erode_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_ready);

    img_2_cols_channel_U : component color_analysis_fifo_w32_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry1_proc_U0_ap_return_3,
        if_full_n => img_2_cols_channel_full_n,
        if_write => ap_channel_done_img_2_cols_channel,
        if_dout => img_2_cols_channel_dout,
        if_num_data_valid => img_2_cols_channel_num_data_valid,
        if_fifo_cap => img_2_cols_channel_fifo_cap,
        if_empty_n => img_2_cols_channel_empty_n,
        if_read => erode_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_ready);

    img_3_rows_channel_U : component color_analysis_fifo_w32_d6_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry1_proc_U0_ap_return_4,
        if_full_n => img_3_rows_channel_full_n,
        if_write => ap_channel_done_img_3_rows_channel,
        if_dout => img_3_rows_channel_dout,
        if_num_data_valid => img_3_rows_channel_num_data_valid,
        if_fifo_cap => img_3_rows_channel_fifo_cap,
        if_empty_n => img_3_rows_channel_empty_n,
        if_read => dilate_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_ready);

    img_3_cols_channel_U : component color_analysis_fifo_w32_d6_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry1_proc_U0_ap_return_5,
        if_full_n => img_3_cols_channel_full_n,
        if_write => ap_channel_done_img_3_cols_channel,
        if_dout => img_3_cols_channel_dout,
        if_num_data_valid => img_3_cols_channel_num_data_valid,
        if_fifo_cap => img_3_cols_channel_fifo_cap,
        if_empty_n => img_3_cols_channel_empty_n,
        if_read => dilate_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_ready);

    img_4_rows_channel_U : component color_analysis_fifo_w32_d7_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry1_proc_U0_ap_return_6,
        if_full_n => img_4_rows_channel_full_n,
        if_write => ap_channel_done_img_4_rows_channel,
        if_dout => img_4_rows_channel_dout,
        if_num_data_valid => img_4_rows_channel_num_data_valid,
        if_fifo_cap => img_4_rows_channel_fifo_cap,
        if_empty_n => img_4_rows_channel_empty_n,
        if_read => duplicateMat_0_600_1024_1_2_2_2_U0_ap_ready);

    img_4_cols_channel_U : component color_analysis_fifo_w32_d7_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry1_proc_U0_ap_return_7,
        if_full_n => img_4_cols_channel_full_n,
        if_write => ap_channel_done_img_4_cols_channel,
        if_dout => img_4_cols_channel_dout,
        if_num_data_valid => img_4_cols_channel_num_data_valid,
        if_fifo_cap => img_4_cols_channel_fifo_cap,
        if_empty_n => img_4_cols_channel_empty_n,
        if_read => duplicateMat_0_600_1024_1_2_2_2_U0_ap_ready);

    img_4a_rows_channel_U : component color_analysis_fifo_w32_d8_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry1_proc_U0_ap_return_8,
        if_full_n => img_4a_rows_channel_full_n,
        if_write => ap_channel_done_img_4a_rows_channel,
        if_dout => img_4a_rows_channel_dout,
        if_num_data_valid => img_4a_rows_channel_num_data_valid,
        if_fifo_cap => img_4a_rows_channel_fifo_cap,
        if_empty_n => img_4a_rows_channel_empty_n,
        if_read => gray2rgb_0_9_600_1024_1_2_2_U0_ap_ready);

    img_4a_cols_channel_U : component color_analysis_fifo_w32_d8_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry1_proc_U0_ap_return_9,
        if_full_n => img_4a_cols_channel_full_n,
        if_write => ap_channel_done_img_4a_cols_channel,
        if_dout => img_4a_cols_channel_dout,
        if_num_data_valid => img_4a_cols_channel_num_data_valid,
        if_fifo_cap => img_4a_cols_channel_fifo_cap,
        if_empty_n => img_4a_cols_channel_empty_n,
        if_read => gray2rgb_0_9_600_1024_1_2_2_U0_ap_ready);

    img_4b_rows_channel_U : component color_analysis_fifo_w32_d8_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry1_proc_U0_ap_return_10,
        if_full_n => img_4b_rows_channel_full_n,
        if_write => ap_channel_done_img_4b_rows_channel,
        if_dout => img_4b_rows_channel_dout,
        if_num_data_valid => img_4b_rows_channel_num_data_valid,
        if_fifo_cap => img_4b_rows_channel_fifo_cap,
        if_empty_n => img_4b_rows_channel_empty_n,
        if_read => gray2rgb_0_9_600_1024_1_2_2_1_U0_ap_ready);

    img_4b_cols_channel_U : component color_analysis_fifo_w32_d8_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry1_proc_U0_ap_return_11,
        if_full_n => img_4b_cols_channel_full_n,
        if_write => ap_channel_done_img_4b_cols_channel,
        if_dout => img_4b_cols_channel_dout,
        if_num_data_valid => img_4b_cols_channel_num_data_valid,
        if_fifo_cap => img_4b_cols_channel_fifo_cap,
        if_empty_n => img_4b_cols_channel_empty_n,
        if_read => gray2rgb_0_9_600_1024_1_2_2_1_U0_ap_ready);

    img_5_rows_channel_U : component color_analysis_fifo_w32_d9_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry1_proc_U0_ap_return_12,
        if_full_n => img_5_rows_channel_full_n,
        if_write => ap_channel_done_img_5_rows_channel,
        if_dout => img_5_rows_channel_dout,
        if_num_data_valid => img_5_rows_channel_num_data_valid,
        if_fifo_cap => img_5_rows_channel_fifo_cap,
        if_empty_n => img_5_rows_channel_empty_n,
        if_read => xfMat2AXIvideo_24_9_600_1024_1_2_U0_ap_ready);

    img_5_cols_channel_U : component color_analysis_fifo_w32_d9_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry1_proc_U0_ap_return_13,
        if_full_n => img_5_cols_channel_full_n,
        if_write => ap_channel_done_img_5_cols_channel,
        if_dout => img_5_cols_channel_dout,
        if_num_data_valid => img_5_cols_channel_num_data_valid,
        if_fifo_cap => img_5_cols_channel_fifo_cap,
        if_empty_n => img_5_cols_channel_empty_n,
        if_read => xfMat2AXIvideo_24_9_600_1024_1_2_U0_ap_ready);

    img_6_rows_channel_U : component color_analysis_fifo_w32_d9_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry1_proc_U0_ap_return_14,
        if_full_n => img_6_rows_channel_full_n,
        if_write => ap_channel_done_img_6_rows_channel,
        if_dout => img_6_rows_channel_dout,
        if_num_data_valid => img_6_rows_channel_num_data_valid,
        if_fifo_cap => img_6_rows_channel_fifo_cap,
        if_empty_n => img_6_rows_channel_empty_n,
        if_read => xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_ap_ready);

    img_6_cols_channel_U : component color_analysis_fifo_w32_d9_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry1_proc_U0_ap_return_15,
        if_full_n => img_6_cols_channel_full_n,
        if_write => ap_channel_done_img_6_cols_channel,
        if_dout => img_6_cols_channel_dout,
        if_num_data_valid => img_6_cols_channel_num_data_valid,
        if_fifo_cap => img_6_cols_channel_fifo_cap,
        if_empty_n => img_6_cols_channel_empty_n,
        if_read => xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_ap_ready);

    img_0_rows_c23_channel_U : component color_analysis_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry1_proc_U0_ap_return_16,
        if_full_n => img_0_rows_c23_channel_full_n,
        if_write => ap_channel_done_img_0_rows_c23_channel,
        if_dout => img_0_rows_c23_channel_dout,
        if_num_data_valid => img_0_rows_c23_channel_num_data_valid,
        if_fifo_cap => img_0_rows_c23_channel_fifo_cap,
        if_empty_n => img_0_rows_c23_channel_empty_n,
        if_read => AXIvideo2xfMat_24_9_600_1024_1_2_U0_ap_ready);

    img_0_cols_c24_channel_U : component color_analysis_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry1_proc_U0_ap_return_17,
        if_full_n => img_0_cols_c24_channel_full_n,
        if_write => ap_channel_done_img_0_cols_c24_channel,
        if_dout => img_0_cols_c24_channel_dout,
        if_num_data_valid => img_0_cols_c24_channel_num_data_valid,
        if_fifo_cap => img_0_cols_c24_channel_fifo_cap,
        if_empty_n => img_0_cols_c24_channel_empty_n,
        if_read => AXIvideo2xfMat_24_9_600_1024_1_2_U0_ap_ready);

    img_0_data_U : component color_analysis_fifo_w24_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_data163_din,
        if_full_n => img_0_data_full_n,
        if_write => AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_data163_write,
        if_dout => img_0_data_dout,
        if_num_data_valid => img_0_data_num_data_valid,
        if_fifo_cap => img_0_data_fifo_cap,
        if_empty_n => img_0_data_empty_n,
        if_read => medianBlur_3_1_9_600_1024_1_2_2_U0_img_0_data163_read);

    img_0_rows_c_U : component color_analysis_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_rows_c_din,
        if_full_n => img_0_rows_c_full_n,
        if_write => AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_rows_c_write,
        if_dout => img_0_rows_c_dout,
        if_num_data_valid => img_0_rows_c_num_data_valid,
        if_fifo_cap => img_0_rows_c_fifo_cap,
        if_empty_n => img_0_rows_c_empty_n,
        if_read => medianBlur_3_1_9_600_1024_1_2_2_U0_p_src_rows_read);

    img_0_cols_c_U : component color_analysis_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_cols_c_din,
        if_full_n => img_0_cols_c_full_n,
        if_write => AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_cols_c_write,
        if_dout => img_0_cols_c_dout,
        if_num_data_valid => img_0_cols_c_num_data_valid,
        if_fifo_cap => img_0_cols_c_fifo_cap,
        if_empty_n => img_0_cols_c_empty_n,
        if_read => medianBlur_3_1_9_600_1024_1_2_2_U0_p_src_cols_read);

    img_1_data_U : component color_analysis_fifo_w24_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => medianBlur_3_1_9_600_1024_1_2_2_U0_img_1_data164_din,
        if_full_n => img_1_data_full_n,
        if_write => medianBlur_3_1_9_600_1024_1_2_2_U0_img_1_data164_write,
        if_dout => img_1_data_dout,
        if_num_data_valid => img_1_data_num_data_valid,
        if_fifo_cap => img_1_data_fifo_cap,
        if_empty_n => img_1_data_empty_n,
        if_read => ImgProcess_9_0_600_1024_1_2_U0_img_1_data164_read);

    img_2_data_U : component color_analysis_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ImgProcess_9_0_600_1024_1_2_U0_img_2_data165_din,
        if_full_n => img_2_data_full_n,
        if_write => ImgProcess_9_0_600_1024_1_2_U0_img_2_data165_write,
        if_dout => img_2_data_dout,
        if_num_data_valid => img_2_data_num_data_valid,
        if_fifo_cap => img_2_data_fifo_cap,
        if_empty_n => img_2_data_empty_n,
        if_read => erode_0_0_600_1024_0_3_3_1_1_2_2_U0_img_2_data165_read);

    img_3_data_U : component color_analysis_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => erode_0_0_600_1024_0_3_3_1_1_2_2_U0_img_3_data166_din,
        if_full_n => img_3_data_full_n,
        if_write => erode_0_0_600_1024_0_3_3_1_1_2_2_U0_img_3_data166_write,
        if_dout => img_3_data_dout,
        if_num_data_valid => img_3_data_num_data_valid,
        if_fifo_cap => img_3_data_fifo_cap,
        if_empty_n => img_3_data_empty_n,
        if_read => dilate_0_0_600_1024_0_3_3_1_1_2_2_U0_img_3_data166_read);

    img_4_data_U : component color_analysis_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dilate_0_0_600_1024_0_3_3_1_1_2_2_U0_img_4_data167_din,
        if_full_n => img_4_data_full_n,
        if_write => dilate_0_0_600_1024_0_3_3_1_1_2_2_U0_img_4_data167_write,
        if_dout => img_4_data_dout,
        if_num_data_valid => img_4_data_num_data_valid,
        if_fifo_cap => img_4_data_fifo_cap,
        if_empty_n => img_4_data_empty_n,
        if_read => duplicateMat_0_600_1024_1_2_2_2_U0_img_4_data167_read);

    img_4a_data_U : component color_analysis_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => duplicateMat_0_600_1024_1_2_2_2_U0_img_4a_data168_din,
        if_full_n => img_4a_data_full_n,
        if_write => duplicateMat_0_600_1024_1_2_2_2_U0_img_4a_data168_write,
        if_dout => img_4a_data_dout,
        if_num_data_valid => img_4a_data_num_data_valid,
        if_fifo_cap => img_4a_data_fifo_cap,
        if_empty_n => img_4a_data_empty_n,
        if_read => gray2rgb_0_9_600_1024_1_2_2_U0_img_4a_data168_read);

    img_4b_data_U : component color_analysis_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => duplicateMat_0_600_1024_1_2_2_2_U0_img_4b_data169_din,
        if_full_n => img_4b_data_full_n,
        if_write => duplicateMat_0_600_1024_1_2_2_2_U0_img_4b_data169_write,
        if_dout => img_4b_data_dout,
        if_num_data_valid => img_4b_data_num_data_valid,
        if_fifo_cap => img_4b_data_fifo_cap,
        if_empty_n => img_4b_data_empty_n,
        if_read => gray2rgb_0_9_600_1024_1_2_2_1_U0_img_4b_data169_read);

    img_5_data_U : component color_analysis_fifo_w24_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gray2rgb_0_9_600_1024_1_2_2_U0_img_5_data170_din,
        if_full_n => img_5_data_full_n,
        if_write => gray2rgb_0_9_600_1024_1_2_2_U0_img_5_data170_write,
        if_dout => img_5_data_dout,
        if_num_data_valid => img_5_data_num_data_valid,
        if_fifo_cap => img_5_data_fifo_cap,
        if_empty_n => img_5_data_empty_n,
        if_read => xfMat2AXIvideo_24_9_600_1024_1_2_U0_img_5_data170_read);

    img_6_data_U : component color_analysis_fifo_w24_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gray2rgb_0_9_600_1024_1_2_2_1_U0_img_6_data171_din,
        if_full_n => img_6_data_full_n,
        if_write => gray2rgb_0_9_600_1024_1_2_2_1_U0_img_6_data171_write,
        if_dout => img_6_data_dout,
        if_num_data_valid => img_6_data_num_data_valid,
        if_fifo_cap => img_6_data_fifo_cap,
        if_empty_n => img_6_data_empty_n,
        if_read => xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_img_6_data171_read);

    start_for_medianBlur_3_1_9_600_1024_1_2_2_U0_U : component color_analysis_start_for_medianBlur_3_1_9_600_1024_1_2_2_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_medianBlur_3_1_9_600_1024_1_2_2_U0_din,
        if_full_n => start_for_medianBlur_3_1_9_600_1024_1_2_2_U0_full_n,
        if_write => AXIvideo2xfMat_24_9_600_1024_1_2_U0_start_write,
        if_dout => start_for_medianBlur_3_1_9_600_1024_1_2_2_U0_dout,
        if_empty_n => start_for_medianBlur_3_1_9_600_1024_1_2_2_U0_empty_n,
        if_read => medianBlur_3_1_9_600_1024_1_2_2_U0_ap_ready);





    ap_sync_reg_Block_entry1_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Block_entry1_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_entry1_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_entry1_proc_U0_ap_ready <= ap_sync_Block_entry1_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_img_0_cols_c24_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_img_0_cols_c24_channel <= ap_const_logic_0;
            else
                if (((Block_entry1_proc_U0_ap_done and Block_entry1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_img_0_cols_c24_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_img_0_cols_c24_channel <= ap_sync_channel_write_img_0_cols_c24_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_img_0_rows_c23_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_img_0_rows_c23_channel <= ap_const_logic_0;
            else
                if (((Block_entry1_proc_U0_ap_done and Block_entry1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_img_0_rows_c23_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_img_0_rows_c23_channel <= ap_sync_channel_write_img_0_rows_c23_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_img_1_cols_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_img_1_cols_channel <= ap_const_logic_0;
            else
                if (((Block_entry1_proc_U0_ap_done and Block_entry1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_img_1_cols_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_img_1_cols_channel <= ap_sync_channel_write_img_1_cols_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_img_1_rows_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_img_1_rows_channel <= ap_const_logic_0;
            else
                if (((Block_entry1_proc_U0_ap_done and Block_entry1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_img_1_rows_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_img_1_rows_channel <= ap_sync_channel_write_img_1_rows_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_img_2_cols_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_img_2_cols_channel <= ap_const_logic_0;
            else
                if (((Block_entry1_proc_U0_ap_done and Block_entry1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_img_2_cols_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_img_2_cols_channel <= ap_sync_channel_write_img_2_cols_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_img_2_rows_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_img_2_rows_channel <= ap_const_logic_0;
            else
                if (((Block_entry1_proc_U0_ap_done and Block_entry1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_img_2_rows_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_img_2_rows_channel <= ap_sync_channel_write_img_2_rows_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_img_3_cols_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_img_3_cols_channel <= ap_const_logic_0;
            else
                if (((Block_entry1_proc_U0_ap_done and Block_entry1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_img_3_cols_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_img_3_cols_channel <= ap_sync_channel_write_img_3_cols_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_img_3_rows_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_img_3_rows_channel <= ap_const_logic_0;
            else
                if (((Block_entry1_proc_U0_ap_done and Block_entry1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_img_3_rows_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_img_3_rows_channel <= ap_sync_channel_write_img_3_rows_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_img_4_cols_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_img_4_cols_channel <= ap_const_logic_0;
            else
                if (((Block_entry1_proc_U0_ap_done and Block_entry1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_img_4_cols_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_img_4_cols_channel <= ap_sync_channel_write_img_4_cols_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_img_4_rows_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_img_4_rows_channel <= ap_const_logic_0;
            else
                if (((Block_entry1_proc_U0_ap_done and Block_entry1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_img_4_rows_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_img_4_rows_channel <= ap_sync_channel_write_img_4_rows_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_img_4a_cols_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_img_4a_cols_channel <= ap_const_logic_0;
            else
                if (((Block_entry1_proc_U0_ap_done and Block_entry1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_img_4a_cols_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_img_4a_cols_channel <= ap_sync_channel_write_img_4a_cols_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_img_4a_rows_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_img_4a_rows_channel <= ap_const_logic_0;
            else
                if (((Block_entry1_proc_U0_ap_done and Block_entry1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_img_4a_rows_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_img_4a_rows_channel <= ap_sync_channel_write_img_4a_rows_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_img_4b_cols_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_img_4b_cols_channel <= ap_const_logic_0;
            else
                if (((Block_entry1_proc_U0_ap_done and Block_entry1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_img_4b_cols_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_img_4b_cols_channel <= ap_sync_channel_write_img_4b_cols_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_img_4b_rows_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_img_4b_rows_channel <= ap_const_logic_0;
            else
                if (((Block_entry1_proc_U0_ap_done and Block_entry1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_img_4b_rows_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_img_4b_rows_channel <= ap_sync_channel_write_img_4b_rows_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_img_5_cols_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_img_5_cols_channel <= ap_const_logic_0;
            else
                if (((Block_entry1_proc_U0_ap_done and Block_entry1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_img_5_cols_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_img_5_cols_channel <= ap_sync_channel_write_img_5_cols_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_img_5_rows_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_img_5_rows_channel <= ap_const_logic_0;
            else
                if (((Block_entry1_proc_U0_ap_done and Block_entry1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_img_5_rows_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_img_5_rows_channel <= ap_sync_channel_write_img_5_rows_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_img_6_cols_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_img_6_cols_channel <= ap_const_logic_0;
            else
                if (((Block_entry1_proc_U0_ap_done and Block_entry1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_img_6_cols_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_img_6_cols_channel <= ap_sync_channel_write_img_6_cols_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_img_6_rows_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_img_6_rows_channel <= ap_const_logic_0;
            else
                if (((Block_entry1_proc_U0_ap_done and Block_entry1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_img_6_rows_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_img_6_rows_channel <= ap_sync_channel_write_img_6_rows_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    AXIvideo2xfMat_24_9_600_1024_1_2_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2xfMat_24_9_600_1024_1_2_U0_ap_start <= (img_0_rows_c23_channel_empty_n and img_0_cols_c24_channel_empty_n);
    Block_entry1_proc_U0_ap_continue <= (ap_sync_channel_write_img_6_rows_channel and ap_sync_channel_write_img_6_cols_channel and ap_sync_channel_write_img_5_rows_channel and ap_sync_channel_write_img_5_cols_channel and ap_sync_channel_write_img_4b_rows_channel and ap_sync_channel_write_img_4b_cols_channel and ap_sync_channel_write_img_4a_rows_channel and ap_sync_channel_write_img_4a_cols_channel and ap_sync_channel_write_img_4_rows_channel and ap_sync_channel_write_img_4_cols_channel and ap_sync_channel_write_img_3_rows_channel and ap_sync_channel_write_img_3_cols_channel and ap_sync_channel_write_img_2_rows_channel and ap_sync_channel_write_img_2_cols_channel and ap_sync_channel_write_img_1_rows_channel and ap_sync_channel_write_img_1_cols_channel and ap_sync_channel_write_img_0_rows_c23_channel and ap_sync_channel_write_img_0_cols_c24_channel);
    Block_entry1_proc_U0_ap_start <= ((ap_sync_reg_Block_entry1_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    INPUT_STREAM_TREADY <= AXIvideo2xfMat_24_9_600_1024_1_2_U0_INPUT_STREAM_TREADY;
    ImgProcess_9_0_600_1024_1_2_U0_ap_continue <= ap_const_logic_1;
    ImgProcess_9_0_600_1024_1_2_U0_ap_start <= (img_1_rows_channel_empty_n and img_1_cols_channel_empty_n);
    OUTPUT_STREAM_DIP_TDATA <= xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_OUTPUT_STREAM_DIP_TDATA;
    OUTPUT_STREAM_DIP_TDEST <= xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_OUTPUT_STREAM_DIP_TDEST;
    OUTPUT_STREAM_DIP_TID <= xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_OUTPUT_STREAM_DIP_TID;
    OUTPUT_STREAM_DIP_TKEEP <= xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_OUTPUT_STREAM_DIP_TKEEP;
    OUTPUT_STREAM_DIP_TLAST <= xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_OUTPUT_STREAM_DIP_TLAST;
    OUTPUT_STREAM_DIP_TSTRB <= xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_OUTPUT_STREAM_DIP_TSTRB;
    OUTPUT_STREAM_DIP_TUSER <= xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_OUTPUT_STREAM_DIP_TUSER;
    OUTPUT_STREAM_DIP_TVALID <= xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_OUTPUT_STREAM_DIP_TVALID;
    OUTPUT_STREAM_VIDEO_TDATA <= xfMat2AXIvideo_24_9_600_1024_1_2_U0_OUTPUT_STREAM_VIDEO_TDATA;
    OUTPUT_STREAM_VIDEO_TDEST <= xfMat2AXIvideo_24_9_600_1024_1_2_U0_OUTPUT_STREAM_VIDEO_TDEST;
    OUTPUT_STREAM_VIDEO_TID <= xfMat2AXIvideo_24_9_600_1024_1_2_U0_OUTPUT_STREAM_VIDEO_TID;
    OUTPUT_STREAM_VIDEO_TKEEP <= xfMat2AXIvideo_24_9_600_1024_1_2_U0_OUTPUT_STREAM_VIDEO_TKEEP;
    OUTPUT_STREAM_VIDEO_TLAST <= xfMat2AXIvideo_24_9_600_1024_1_2_U0_OUTPUT_STREAM_VIDEO_TLAST;
    OUTPUT_STREAM_VIDEO_TSTRB <= xfMat2AXIvideo_24_9_600_1024_1_2_U0_OUTPUT_STREAM_VIDEO_TSTRB;
    OUTPUT_STREAM_VIDEO_TUSER <= xfMat2AXIvideo_24_9_600_1024_1_2_U0_OUTPUT_STREAM_VIDEO_TUSER;
    OUTPUT_STREAM_VIDEO_TVALID <= xfMat2AXIvideo_24_9_600_1024_1_2_U0_OUTPUT_STREAM_VIDEO_TVALID;
    ap_channel_done_img_0_cols_c24_channel <= ((ap_sync_reg_channel_write_img_0_cols_c24_channel xor ap_const_logic_1) and Block_entry1_proc_U0_ap_done);
    ap_channel_done_img_0_rows_c23_channel <= ((ap_sync_reg_channel_write_img_0_rows_c23_channel xor ap_const_logic_1) and Block_entry1_proc_U0_ap_done);
    ap_channel_done_img_1_cols_channel <= ((ap_sync_reg_channel_write_img_1_cols_channel xor ap_const_logic_1) and Block_entry1_proc_U0_ap_done);
    ap_channel_done_img_1_rows_channel <= ((ap_sync_reg_channel_write_img_1_rows_channel xor ap_const_logic_1) and Block_entry1_proc_U0_ap_done);
    ap_channel_done_img_2_cols_channel <= ((ap_sync_reg_channel_write_img_2_cols_channel xor ap_const_logic_1) and Block_entry1_proc_U0_ap_done);
    ap_channel_done_img_2_rows_channel <= ((ap_sync_reg_channel_write_img_2_rows_channel xor ap_const_logic_1) and Block_entry1_proc_U0_ap_done);
    ap_channel_done_img_3_cols_channel <= ((ap_sync_reg_channel_write_img_3_cols_channel xor ap_const_logic_1) and Block_entry1_proc_U0_ap_done);
    ap_channel_done_img_3_rows_channel <= ((ap_sync_reg_channel_write_img_3_rows_channel xor ap_const_logic_1) and Block_entry1_proc_U0_ap_done);
    ap_channel_done_img_4_cols_channel <= ((ap_sync_reg_channel_write_img_4_cols_channel xor ap_const_logic_1) and Block_entry1_proc_U0_ap_done);
    ap_channel_done_img_4_rows_channel <= ((ap_sync_reg_channel_write_img_4_rows_channel xor ap_const_logic_1) and Block_entry1_proc_U0_ap_done);
    ap_channel_done_img_4a_cols_channel <= ((ap_sync_reg_channel_write_img_4a_cols_channel xor ap_const_logic_1) and Block_entry1_proc_U0_ap_done);
    ap_channel_done_img_4a_rows_channel <= ((ap_sync_reg_channel_write_img_4a_rows_channel xor ap_const_logic_1) and Block_entry1_proc_U0_ap_done);
    ap_channel_done_img_4b_cols_channel <= ((ap_sync_reg_channel_write_img_4b_cols_channel xor ap_const_logic_1) and Block_entry1_proc_U0_ap_done);
    ap_channel_done_img_4b_rows_channel <= ((ap_sync_reg_channel_write_img_4b_rows_channel xor ap_const_logic_1) and Block_entry1_proc_U0_ap_done);
    ap_channel_done_img_5_cols_channel <= ((ap_sync_reg_channel_write_img_5_cols_channel xor ap_const_logic_1) and Block_entry1_proc_U0_ap_done);
    ap_channel_done_img_5_rows_channel <= ((ap_sync_reg_channel_write_img_5_rows_channel xor ap_const_logic_1) and Block_entry1_proc_U0_ap_done);
    ap_channel_done_img_6_cols_channel <= ((ap_sync_reg_channel_write_img_6_cols_channel xor ap_const_logic_1) and Block_entry1_proc_U0_ap_done);
    ap_channel_done_img_6_rows_channel <= ((ap_sync_reg_channel_write_img_6_rows_channel xor ap_const_logic_1) and Block_entry1_proc_U0_ap_done);
    ap_done <= ap_sync_done;
    ap_idle <= (xfMat2AXIvideo_24_9_600_1024_1_2_U0_ap_idle and xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_ap_idle and medianBlur_3_1_9_600_1024_1_2_2_U0_ap_idle and gray2rgb_0_9_600_1024_1_2_2_U0_ap_idle and gray2rgb_0_9_600_1024_1_2_2_1_U0_ap_idle and (img_0_cols_c24_channel_empty_n xor ap_const_logic_1) and (img_0_rows_c23_channel_empty_n xor ap_const_logic_1) and (img_6_cols_channel_empty_n xor ap_const_logic_1) and (img_6_rows_channel_empty_n xor ap_const_logic_1) and (img_5_cols_channel_empty_n xor ap_const_logic_1) and (img_5_rows_channel_empty_n xor ap_const_logic_1) and (img_4b_cols_channel_empty_n xor ap_const_logic_1) and (img_4b_rows_channel_empty_n xor ap_const_logic_1) and (img_4a_cols_channel_empty_n xor ap_const_logic_1) and (img_4a_rows_channel_empty_n xor ap_const_logic_1) and (img_4_cols_channel_empty_n xor ap_const_logic_1) and (img_4_rows_channel_empty_n xor ap_const_logic_1) and (img_3_cols_channel_empty_n xor ap_const_logic_1) and (img_3_rows_channel_empty_n xor ap_const_logic_1) and (img_2_cols_channel_empty_n xor ap_const_logic_1) and (img_2_rows_channel_empty_n xor ap_const_logic_1) and (img_1_cols_channel_empty_n xor ap_const_logic_1) and (img_1_rows_channel_empty_n xor ap_const_logic_1) and erode_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_idle and entry_proc_U0_ap_idle and duplicateMat_0_600_1024_1_2_2_2_U0_ap_idle and dilate_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_idle and ImgProcess_9_0_600_1024_1_2_U0_ap_idle and Block_entry1_proc_U0_ap_idle and AXIvideo2xfMat_24_9_600_1024_1_2_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_Block_entry1_proc_U0_ap_ready <= (ap_sync_reg_Block_entry1_proc_U0_ap_ready or Block_entry1_proc_U0_ap_ready);
    ap_sync_channel_write_img_0_cols_c24_channel <= ((img_0_cols_c24_channel_full_n and ap_channel_done_img_0_cols_c24_channel) or ap_sync_reg_channel_write_img_0_cols_c24_channel);
    ap_sync_channel_write_img_0_rows_c23_channel <= ((img_0_rows_c23_channel_full_n and ap_channel_done_img_0_rows_c23_channel) or ap_sync_reg_channel_write_img_0_rows_c23_channel);
    ap_sync_channel_write_img_1_cols_channel <= ((img_1_cols_channel_full_n and ap_channel_done_img_1_cols_channel) or ap_sync_reg_channel_write_img_1_cols_channel);
    ap_sync_channel_write_img_1_rows_channel <= ((img_1_rows_channel_full_n and ap_channel_done_img_1_rows_channel) or ap_sync_reg_channel_write_img_1_rows_channel);
    ap_sync_channel_write_img_2_cols_channel <= ((img_2_cols_channel_full_n and ap_channel_done_img_2_cols_channel) or ap_sync_reg_channel_write_img_2_cols_channel);
    ap_sync_channel_write_img_2_rows_channel <= ((img_2_rows_channel_full_n and ap_channel_done_img_2_rows_channel) or ap_sync_reg_channel_write_img_2_rows_channel);
    ap_sync_channel_write_img_3_cols_channel <= ((img_3_cols_channel_full_n and ap_channel_done_img_3_cols_channel) or ap_sync_reg_channel_write_img_3_cols_channel);
    ap_sync_channel_write_img_3_rows_channel <= ((img_3_rows_channel_full_n and ap_channel_done_img_3_rows_channel) or ap_sync_reg_channel_write_img_3_rows_channel);
    ap_sync_channel_write_img_4_cols_channel <= ((img_4_cols_channel_full_n and ap_channel_done_img_4_cols_channel) or ap_sync_reg_channel_write_img_4_cols_channel);
    ap_sync_channel_write_img_4_rows_channel <= ((img_4_rows_channel_full_n and ap_channel_done_img_4_rows_channel) or ap_sync_reg_channel_write_img_4_rows_channel);
    ap_sync_channel_write_img_4a_cols_channel <= ((img_4a_cols_channel_full_n and ap_channel_done_img_4a_cols_channel) or ap_sync_reg_channel_write_img_4a_cols_channel);
    ap_sync_channel_write_img_4a_rows_channel <= ((img_4a_rows_channel_full_n and ap_channel_done_img_4a_rows_channel) or ap_sync_reg_channel_write_img_4a_rows_channel);
    ap_sync_channel_write_img_4b_cols_channel <= ((img_4b_cols_channel_full_n and ap_channel_done_img_4b_cols_channel) or ap_sync_reg_channel_write_img_4b_cols_channel);
    ap_sync_channel_write_img_4b_rows_channel <= ((img_4b_rows_channel_full_n and ap_channel_done_img_4b_rows_channel) or ap_sync_reg_channel_write_img_4b_rows_channel);
    ap_sync_channel_write_img_5_cols_channel <= ((img_5_cols_channel_full_n and ap_channel_done_img_5_cols_channel) or ap_sync_reg_channel_write_img_5_cols_channel);
    ap_sync_channel_write_img_5_rows_channel <= ((img_5_rows_channel_full_n and ap_channel_done_img_5_rows_channel) or ap_sync_reg_channel_write_img_5_rows_channel);
    ap_sync_channel_write_img_6_cols_channel <= ((img_6_cols_channel_full_n and ap_channel_done_img_6_cols_channel) or ap_sync_reg_channel_write_img_6_cols_channel);
    ap_sync_channel_write_img_6_rows_channel <= ((img_6_rows_channel_full_n and ap_channel_done_img_6_rows_channel) or ap_sync_reg_channel_write_img_6_rows_channel);
    ap_sync_done <= (xfMat2AXIvideo_24_9_600_1024_1_2_U0_ap_done and xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_ap_done);
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_ready <= (ap_sync_entry_proc_U0_ap_ready and ap_sync_Block_entry1_proc_U0_ap_ready);
    dilate_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_continue <= ap_const_logic_1;
    dilate_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_start <= (img_3_rows_channel_empty_n and img_3_cols_channel_empty_n);
    duplicateMat_0_600_1024_1_2_2_2_U0_ap_continue <= ap_const_logic_1;
    duplicateMat_0_600_1024_1_2_2_2_U0_ap_start <= (img_4_rows_channel_empty_n and img_4_cols_channel_empty_n);
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    erode_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_continue <= ap_const_logic_1;
    erode_0_0_600_1024_0_3_3_1_1_2_2_U0_ap_start <= (img_2_rows_channel_empty_n and img_2_cols_channel_empty_n);
    gray2rgb_0_9_600_1024_1_2_2_1_U0_ap_continue <= ap_const_logic_1;
    gray2rgb_0_9_600_1024_1_2_2_1_U0_ap_start <= (img_4b_rows_channel_empty_n and img_4b_cols_channel_empty_n);
    gray2rgb_0_9_600_1024_1_2_2_U0_ap_continue <= ap_const_logic_1;
    gray2rgb_0_9_600_1024_1_2_2_U0_ap_start <= (img_4a_rows_channel_empty_n and img_4a_cols_channel_empty_n);
    medianBlur_3_1_9_600_1024_1_2_2_U0_ap_continue <= ap_const_logic_1;
    medianBlur_3_1_9_600_1024_1_2_2_U0_ap_start <= start_for_medianBlur_3_1_9_600_1024_1_2_2_U0_empty_n;
    start_for_medianBlur_3_1_9_600_1024_1_2_2_U0_din <= (0=>ap_const_logic_1, others=>'-');
    xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_ap_continue <= ap_sync_done;
    xfMat2AXIvideo_24_9_600_1024_1_2_2_U0_ap_start <= (img_6_rows_channel_empty_n and img_6_cols_channel_empty_n);
    xfMat2AXIvideo_24_9_600_1024_1_2_U0_ap_continue <= ap_sync_done;
    xfMat2AXIvideo_24_9_600_1024_1_2_U0_ap_start <= (img_5_rows_channel_empty_n and img_5_cols_channel_empty_n);
end behav;

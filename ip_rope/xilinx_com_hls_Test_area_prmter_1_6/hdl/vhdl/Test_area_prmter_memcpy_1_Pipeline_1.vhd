-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Test_area_prmter_memcpy_1_Pipeline_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_RESULT_AWVALID : OUT STD_LOGIC;
    m_axi_RESULT_AWREADY : IN STD_LOGIC;
    m_axi_RESULT_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_RESULT_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_RESULT_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_RESULT_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_RESULT_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_RESULT_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_RESULT_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_RESULT_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_RESULT_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_RESULT_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_RESULT_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_RESULT_WVALID : OUT STD_LOGIC;
    m_axi_RESULT_WREADY : IN STD_LOGIC;
    m_axi_RESULT_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_RESULT_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_RESULT_WLAST : OUT STD_LOGIC;
    m_axi_RESULT_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_RESULT_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_RESULT_ARVALID : OUT STD_LOGIC;
    m_axi_RESULT_ARREADY : IN STD_LOGIC;
    m_axi_RESULT_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_RESULT_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_RESULT_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_RESULT_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_RESULT_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_RESULT_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_RESULT_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_RESULT_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_RESULT_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_RESULT_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_RESULT_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_RESULT_RVALID : IN STD_LOGIC;
    m_axi_RESULT_RREADY : OUT STD_LOGIC;
    m_axi_RESULT_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_RESULT_RLAST : IN STD_LOGIC;
    m_axi_RESULT_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_RESULT_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_RESULT_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_RESULT_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_RESULT_BVALID : IN STD_LOGIC;
    m_axi_RESULT_BREADY : OUT STD_LOGIC;
    m_axi_RESULT_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_RESULT_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_RESULT_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    param_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    param_ce0 : OUT STD_LOGIC;
    param_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dest_load : IN STD_LOGIC_VECTOR (63 downto 0);
    dest_cast : IN STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of Test_area_prmter_memcpy_1_Pipeline_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal exitcond_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal RESULT_blk_n_AW : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal RESULT_blk_n_W : STD_LOGIC;
    signal RESULT_blk_n_B : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal empty_fu_137_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_258 : STD_LOGIC_VECTOR (1 downto 0);
    signal RESULT_addr_reg_264 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_48_fu_217_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_48_reg_274 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_49_fu_235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_49_reg_279 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast6_fu_132_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast2_cast_fu_157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal loop_index_fu_68 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_cast4_fu_167_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_loop_index_load : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_124_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_index_cast5_fu_120_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_46_fu_141_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast2_fu_147_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_2_fu_184_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_cast7_fu_191_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_44_fu_195_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_45_fu_201_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_47_fu_209_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast8_fu_213_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_223_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_cast_cast_fu_205_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast9_fu_231_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Test_area_prmter_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component Test_area_prmter_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter7_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if; 
        end if;
    end process;

    loop_index_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_fu_173_p2 = ap_const_lv1_0))) then 
                    loop_index_fu_68 <= p_cast4_fu_167_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    loop_index_fu_68 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                RESULT_addr_reg_264 <= p_cast2_cast_fu_157_p1;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_48_reg_274 <= empty_48_fu_217_p2;
                empty_49_reg_279 <= empty_49_fu_235_p2;
                empty_reg_258 <= empty_fu_137_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    RESULT_blk_n_AW_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_RESULT_AWREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            RESULT_blk_n_AW <= m_axi_RESULT_AWREADY;
        else 
            RESULT_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    RESULT_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter7, m_axi_RESULT_BVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            RESULT_blk_n_B <= m_axi_RESULT_BVALID;
        else 
            RESULT_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    RESULT_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_RESULT_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            RESULT_blk_n_W <= m_axi_RESULT_WREADY;
        else 
            RESULT_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter7, m_axi_RESULT_BVALID)
    begin
                ap_block_pp0_stage0_01001 <= ((m_axi_RESULT_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, m_axi_RESULT_AWREADY, m_axi_RESULT_WREADY, m_axi_RESULT_BVALID)
    begin
                ap_block_pp0_stage0_11001 <= (((m_axi_RESULT_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((m_axi_RESULT_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((m_axi_RESULT_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, m_axi_RESULT_AWREADY, m_axi_RESULT_WREADY, m_axi_RESULT_BVALID)
    begin
                ap_block_pp0_stage0_subdone <= (((m_axi_RESULT_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((m_axi_RESULT_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((m_axi_RESULT_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage0_iter7_assign_proc : process(m_axi_RESULT_BVALID)
    begin
                ap_block_state8_pp0_stage0_iter7 <= (m_axi_RESULT_BVALID = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, exitcond_fu_173_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_fu_173_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_loop_index_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, loop_index_fu_68, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_loop_index_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_loop_index_load <= loop_index_fu_68;
        end if; 
    end process;

    empty_44_fu_195_p2 <= std_logic_vector(shift_right(unsigned(param_q0),to_integer(unsigned('0' & p_cast7_fu_191_p1(31-1 downto 0)))));
    empty_45_fu_201_p1 <= empty_44_fu_195_p2(8 - 1 downto 0);
    empty_46_fu_141_p2 <= std_logic_vector(unsigned(dest_load) + unsigned(loop_index_cast5_fu_120_p1));
    empty_47_fu_209_p2 <= std_logic_vector(unsigned(empty_reg_258) + unsigned(dest_cast));
    empty_48_fu_217_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & p_cast8_fu_213_p1(4-1 downto 0)))));
    empty_49_fu_235_p2 <= std_logic_vector(shift_left(unsigned(p_cast_cast_fu_205_p1),to_integer(unsigned('0' & p_cast9_fu_231_p1(31-1 downto 0)))));
    empty_fu_137_p1 <= ap_sig_allocacmp_loop_index_load(2 - 1 downto 0);
    exitcond_fu_173_p2 <= "1" when (ap_sig_allocacmp_loop_index_load = ap_const_lv3_7) else "0";
    loop_index_cast5_fu_120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_loop_index_load),64));
    m_axi_RESULT_ARADDR <= ap_const_lv64_0;
    m_axi_RESULT_ARBURST <= ap_const_lv2_0;
    m_axi_RESULT_ARCACHE <= ap_const_lv4_0;
    m_axi_RESULT_ARID <= ap_const_lv1_0;
    m_axi_RESULT_ARLEN <= ap_const_lv32_0;
    m_axi_RESULT_ARLOCK <= ap_const_lv2_0;
    m_axi_RESULT_ARPROT <= ap_const_lv3_0;
    m_axi_RESULT_ARQOS <= ap_const_lv4_0;
    m_axi_RESULT_ARREGION <= ap_const_lv4_0;
    m_axi_RESULT_ARSIZE <= ap_const_lv3_0;
    m_axi_RESULT_ARUSER <= ap_const_lv1_0;
    m_axi_RESULT_ARVALID <= ap_const_logic_0;
    m_axi_RESULT_AWADDR <= RESULT_addr_reg_264;
    m_axi_RESULT_AWBURST <= ap_const_lv2_0;
    m_axi_RESULT_AWCACHE <= ap_const_lv4_0;
    m_axi_RESULT_AWID <= ap_const_lv1_0;
    m_axi_RESULT_AWLEN <= ap_const_lv32_1;
    m_axi_RESULT_AWLOCK <= ap_const_lv2_0;
    m_axi_RESULT_AWPROT <= ap_const_lv3_0;
    m_axi_RESULT_AWQOS <= ap_const_lv4_0;
    m_axi_RESULT_AWREGION <= ap_const_lv4_0;
    m_axi_RESULT_AWSIZE <= ap_const_lv3_0;
    m_axi_RESULT_AWUSER <= ap_const_lv1_0;

    m_axi_RESULT_AWVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_RESULT_AWVALID <= ap_const_logic_1;
        else 
            m_axi_RESULT_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_RESULT_BREADY_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_RESULT_BREADY <= ap_const_logic_1;
        else 
            m_axi_RESULT_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_RESULT_RREADY <= ap_const_logic_0;
    m_axi_RESULT_WDATA <= empty_49_reg_279;
    m_axi_RESULT_WID <= ap_const_lv1_0;
    m_axi_RESULT_WLAST <= ap_const_logic_0;
    m_axi_RESULT_WSTRB <= empty_48_reg_274;
    m_axi_RESULT_WUSER <= ap_const_lv1_0;

    m_axi_RESULT_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_RESULT_WVALID <= ap_const_logic_1;
        else 
            m_axi_RESULT_WVALID <= ap_const_logic_0;
        end if; 
    end process;

        p_cast2_cast_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast2_fu_147_p4),64));

    p_cast2_fu_147_p4 <= empty_46_fu_141_p2(63 downto 2);
    p_cast4_fu_167_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_loop_index_load) + unsigned(ap_const_lv3_1));
    p_cast6_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_124_p3),64));
    p_cast7_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_184_p3),32));
    p_cast8_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_47_fu_209_p2),4));
    p_cast9_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_223_p3),32));
    p_cast_cast_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_45_fu_201_p1),32));
    param_address0 <= p_cast6_fu_132_p1(1 - 1 downto 0);

    param_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            param_ce0 <= ap_const_logic_1;
        else 
            param_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_184_p3 <= (empty_reg_258 & ap_const_lv3_0);
    tmp_3_fu_223_p3 <= (empty_47_fu_209_p2 & ap_const_lv3_0);
    tmp_fu_124_p3 <= ap_sig_allocacmp_loop_index_load(2 downto 2);
end behav;

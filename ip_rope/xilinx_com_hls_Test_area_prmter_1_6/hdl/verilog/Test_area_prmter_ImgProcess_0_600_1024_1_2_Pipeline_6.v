// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Test_area_prmter_ImgProcess_0_600_1024_1_2_Pipeline_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        parameter_r_address0,
        parameter_r_ce0,
        parameter_r_q0,
        param_address0,
        param_ce0,
        param_we0,
        param_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [0:0] parameter_r_address0;
output   parameter_r_ce0;
input  [31:0] parameter_r_q0;
output  [0:0] param_address0;
output   param_ce0;
output  [3:0] param_we0;
output  [31:0] param_d0;

reg ap_idle;
reg parameter_r_ce0;
reg param_ce0;
reg[3:0] param_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] exitcond_fu_98_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] p_cast9_fu_83_p1;
reg   [63:0] p_cast9_reg_157;
wire    ap_block_pp0_stage0_11001;
reg   [63:0] p_cast9_reg_157_pp0_iter1_reg;
wire   [1:0] empty_fu_88_p1;
reg   [1:0] empty_reg_167;
reg   [1:0] empty_reg_167_pp0_iter1_reg;
reg   [31:0] parameter_load_reg_177;
wire    ap_block_pp0_stage0;
reg   [2:0] loop_index_i_fu_38;
wire   [2:0] p_cast8_fu_92_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_loop_index_i_load;
wire   [3:0] empty_78_fu_136_p2;
wire   [0:0] tmp_fu_75_p3;
wire   [4:0] tmp_5_fu_109_p3;
wire   [31:0] p_cast10_fu_116_p1;
wire   [31:0] empty_76_fu_120_p2;
wire   [7:0] empty_77_fu_125_p1;
wire   [3:0] loop_index_i_cast_cast11_fu_133_p1;
wire   [31:0] p_cast_cast_fu_129_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Test_area_prmter_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((exitcond_fu_98_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            loop_index_i_fu_38 <= p_cast8_fu_92_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            loop_index_i_fu_38 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        empty_reg_167 <= empty_fu_88_p1;
        empty_reg_167_pp0_iter1_reg <= empty_reg_167;
        p_cast9_reg_157[0] <= p_cast9_fu_83_p1[0];
        p_cast9_reg_157_pp0_iter1_reg[0] <= p_cast9_reg_157[0];
        parameter_load_reg_177 <= parameter_r_q0;
    end
end

always @ (*) begin
    if (((exitcond_fu_98_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_loop_index_i_load = 3'd0;
    end else begin
        ap_sig_allocacmp_loop_index_i_load = loop_index_i_fu_38;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        param_ce0 = 1'b1;
    end else begin
        param_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        param_we0 = empty_78_fu_136_p2;
    end else begin
        param_we0 = 4'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        parameter_r_ce0 = 1'b1;
    end else begin
        parameter_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_76_fu_120_p2 = parameter_load_reg_177 >> p_cast10_fu_116_p1;

assign empty_77_fu_125_p1 = empty_76_fu_120_p2[7:0];

assign empty_78_fu_136_p2 = 4'd1 << loop_index_i_cast_cast11_fu_133_p1;

assign empty_fu_88_p1 = ap_sig_allocacmp_loop_index_i_load[1:0];

assign exitcond_fu_98_p2 = ((ap_sig_allocacmp_loop_index_i_load == 3'd7) ? 1'b1 : 1'b0);

assign loop_index_i_cast_cast11_fu_133_p1 = empty_reg_167_pp0_iter1_reg;

assign p_cast10_fu_116_p1 = tmp_5_fu_109_p3;

assign p_cast8_fu_92_p2 = (ap_sig_allocacmp_loop_index_i_load + 3'd1);

assign p_cast9_fu_83_p1 = tmp_fu_75_p3;

assign p_cast_cast_fu_129_p1 = empty_77_fu_125_p1;

assign param_address0 = p_cast9_reg_157_pp0_iter1_reg;

assign param_d0 = p_cast_cast_fu_129_p1 << p_cast10_fu_116_p1;

assign parameter_r_address0 = p_cast9_fu_83_p1;

assign tmp_5_fu_109_p3 = {{empty_reg_167_pp0_iter1_reg}, {3'd0}};

assign tmp_fu_75_p3 = ap_sig_allocacmp_loop_index_i_load[32'd2];

always @ (posedge ap_clk) begin
    p_cast9_reg_157[63:1] <= 63'b000000000000000000000000000000000000000000000000000000000000000;
    p_cast9_reg_157_pp0_iter1_reg[63:1] <= 63'b000000000000000000000000000000000000000000000000000000000000000;
end

endmodule //Test_area_prmter_ImgProcess_0_600_1024_1_2_Pipeline_6

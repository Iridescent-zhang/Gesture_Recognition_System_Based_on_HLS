-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Test_area_prmter is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    result_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_EN_A : OUT STD_LOGIC;
    result_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    result_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    result_Clk_A : OUT STD_LOGIC;
    result_Rst_A : OUT STD_LOGIC;
    INPUT_STREAM_TVALID : IN STD_LOGIC;
    INPUT_STREAM_TREADY : OUT STD_LOGIC );
end;


architecture behav of Test_area_prmter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Test_area_prmter_Test_area_prmter,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=6.912000,HLS_SYN_LAT=621006,HLS_SYN_TPT=621007,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=1260,HLS_SYN_LUT=2038,HLS_VERSION=2022_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_600_1024_1_2_U0_ap_start : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_600_1024_1_2_U0_ap_done : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_600_1024_1_2_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_600_1024_1_2_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_600_1024_1_2_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_600_1024_1_2_U0_start_out : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_600_1024_1_2_U0_start_write : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_600_1024_1_2_U0_INPUT_STREAM_TREADY : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_data14_din : STD_LOGIC_VECTOR (23 downto 0);
    signal AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_data14_write : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_rows_c_din : STD_LOGIC_VECTOR (9 downto 0);
    signal AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_rows_c_write : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_cols_c_din : STD_LOGIC_VECTOR (10 downto 0);
    signal AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_cols_c_write : STD_LOGIC;
    signal rgb2gray_9_0_600_1024_1_2_2_U0_ap_start : STD_LOGIC;
    signal rgb2gray_9_0_600_1024_1_2_2_U0_ap_done : STD_LOGIC;
    signal rgb2gray_9_0_600_1024_1_2_2_U0_ap_continue : STD_LOGIC;
    signal rgb2gray_9_0_600_1024_1_2_2_U0_ap_idle : STD_LOGIC;
    signal rgb2gray_9_0_600_1024_1_2_2_U0_ap_ready : STD_LOGIC;
    signal rgb2gray_9_0_600_1024_1_2_2_U0_start_out : STD_LOGIC;
    signal rgb2gray_9_0_600_1024_1_2_2_U0_start_write : STD_LOGIC;
    signal rgb2gray_9_0_600_1024_1_2_2_U0_p_src_rows_read : STD_LOGIC;
    signal rgb2gray_9_0_600_1024_1_2_2_U0_p_src_cols_read : STD_LOGIC;
    signal rgb2gray_9_0_600_1024_1_2_2_U0_img_0_data14_read : STD_LOGIC;
    signal rgb2gray_9_0_600_1024_1_2_2_U0_img_1_data15_din : STD_LOGIC_VECTOR (7 downto 0);
    signal rgb2gray_9_0_600_1024_1_2_2_U0_img_1_data15_write : STD_LOGIC;
    signal ImgProcess_0_600_1024_1_2_U0_ap_start : STD_LOGIC;
    signal ImgProcess_0_600_1024_1_2_U0_ap_done : STD_LOGIC;
    signal ImgProcess_0_600_1024_1_2_U0_ap_continue : STD_LOGIC;
    signal ImgProcess_0_600_1024_1_2_U0_ap_idle : STD_LOGIC;
    signal ImgProcess_0_600_1024_1_2_U0_ap_ready : STD_LOGIC;
    signal ImgProcess_0_600_1024_1_2_U0_img_1_data15_read : STD_LOGIC;
    signal ImgProcess_0_600_1024_1_2_U0_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ImgProcess_0_600_1024_1_2_U0_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_param2 : STD_LOGIC;
    signal param2_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_param2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_param2 : STD_LOGIC;
    signal ap_channel_done_param1 : STD_LOGIC;
    signal param1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_param1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_param1 : STD_LOGIC;
    signal Block_entry15_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry15_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry15_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry15_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry15_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry15_proc_U0_result_Addr_A : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry15_proc_U0_result_EN_A : STD_LOGIC;
    signal Block_entry15_proc_U0_result_WEN_A : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_entry15_proc_U0_result_Din_A : STD_LOGIC_VECTOR (31 downto 0);
    signal img_0_data_full_n : STD_LOGIC;
    signal img_0_data_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal img_0_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal img_0_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal img_0_data_empty_n : STD_LOGIC;
    signal img_0_rows_c_full_n : STD_LOGIC;
    signal img_0_rows_c_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal img_0_rows_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal img_0_rows_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal img_0_rows_c_empty_n : STD_LOGIC;
    signal img_0_cols_c_full_n : STD_LOGIC;
    signal img_0_cols_c_dout : STD_LOGIC_VECTOR (10 downto 0);
    signal img_0_cols_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal img_0_cols_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal img_0_cols_c_empty_n : STD_LOGIC;
    signal img_1_data_full_n : STD_LOGIC;
    signal img_1_data_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal img_1_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal img_1_data_empty_n : STD_LOGIC;
    signal param1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal param1_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal param1_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal param1_empty_n : STD_LOGIC;
    signal param2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal param2_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal param2_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal param2_empty_n : STD_LOGIC;
    signal start_for_rgb2gray_9_0_600_1024_1_2_2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_rgb2gray_9_0_600_1024_1_2_2_U0_full_n : STD_LOGIC;
    signal start_for_rgb2gray_9_0_600_1024_1_2_2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_rgb2gray_9_0_600_1024_1_2_2_U0_empty_n : STD_LOGIC;
    signal start_for_ImgProcess_0_600_1024_1_2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_ImgProcess_0_600_1024_1_2_U0_full_n : STD_LOGIC;
    signal start_for_ImgProcess_0_600_1024_1_2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_ImgProcess_0_600_1024_1_2_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Test_area_prmter_AXIvideo2xfMat_24_9_600_1024_1_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        INPUT_STREAM_TVALID : IN STD_LOGIC;
        INPUT_STREAM_TREADY : OUT STD_LOGIC;
        INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_0_data14_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        img_0_data14_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_0_data14_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_0_data14_full_n : IN STD_LOGIC;
        img_0_data14_write : OUT STD_LOGIC;
        img_0_rows_c_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        img_0_rows_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_0_rows_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_0_rows_c_full_n : IN STD_LOGIC;
        img_0_rows_c_write : OUT STD_LOGIC;
        img_0_cols_c_din : OUT STD_LOGIC_VECTOR (10 downto 0);
        img_0_cols_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_0_cols_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_0_cols_c_full_n : IN STD_LOGIC;
        img_0_cols_c_write : OUT STD_LOGIC );
    end component;


    component Test_area_prmter_rgb2gray_9_0_600_1024_1_2_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_rows_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        p_src_rows_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        p_src_rows_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        p_src_rows_empty_n : IN STD_LOGIC;
        p_src_rows_read : OUT STD_LOGIC;
        p_src_cols_dout : IN STD_LOGIC_VECTOR (10 downto 0);
        p_src_cols_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        p_src_cols_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        p_src_cols_empty_n : IN STD_LOGIC;
        p_src_cols_read : OUT STD_LOGIC;
        img_0_data14_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        img_0_data14_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_0_data14_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_0_data14_empty_n : IN STD_LOGIC;
        img_0_data14_read : OUT STD_LOGIC;
        img_1_data15_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_1_data15_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_1_data15_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_1_data15_full_n : IN STD_LOGIC;
        img_1_data15_write : OUT STD_LOGIC );
    end component;


    component Test_area_prmter_ImgProcess_0_600_1024_1_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_1_data15_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_1_data15_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_1_data15_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_1_data15_empty_n : IN STD_LOGIC;
        img_1_data15_read : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Test_area_prmter_Block_entry15_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        result_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        result_EN_A : OUT STD_LOGIC;
        result_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
        result_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        result_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Test_area_prmter_fifo_w24_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (23 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (23 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Test_area_prmter_fifo_w10_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Test_area_prmter_fifo_w11_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (10 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (10 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Test_area_prmter_fifo_w8_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Test_area_prmter_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Test_area_prmter_start_for_rgb2gray_9_0_600_1024_1_2_2_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Test_area_prmter_start_for_ImgProcess_0_600_1024_1_2_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Test_area_prmter_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    CONTROL_BUS_s_axi_U : component Test_area_prmter_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    AXIvideo2xfMat_24_9_600_1024_1_2_U0 : component Test_area_prmter_AXIvideo2xfMat_24_9_600_1024_1_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIvideo2xfMat_24_9_600_1024_1_2_U0_ap_start,
        start_full_n => start_for_rgb2gray_9_0_600_1024_1_2_2_U0_full_n,
        ap_done => AXIvideo2xfMat_24_9_600_1024_1_2_U0_ap_done,
        ap_continue => AXIvideo2xfMat_24_9_600_1024_1_2_U0_ap_continue,
        ap_idle => AXIvideo2xfMat_24_9_600_1024_1_2_U0_ap_idle,
        ap_ready => AXIvideo2xfMat_24_9_600_1024_1_2_U0_ap_ready,
        start_out => AXIvideo2xfMat_24_9_600_1024_1_2_U0_start_out,
        start_write => AXIvideo2xfMat_24_9_600_1024_1_2_U0_start_write,
        INPUT_STREAM_TDATA => INPUT_STREAM_TDATA,
        INPUT_STREAM_TVALID => INPUT_STREAM_TVALID,
        INPUT_STREAM_TREADY => AXIvideo2xfMat_24_9_600_1024_1_2_U0_INPUT_STREAM_TREADY,
        INPUT_STREAM_TKEEP => INPUT_STREAM_TKEEP,
        INPUT_STREAM_TSTRB => INPUT_STREAM_TSTRB,
        INPUT_STREAM_TUSER => INPUT_STREAM_TUSER,
        INPUT_STREAM_TLAST => INPUT_STREAM_TLAST,
        INPUT_STREAM_TID => INPUT_STREAM_TID,
        INPUT_STREAM_TDEST => INPUT_STREAM_TDEST,
        img_0_data14_din => AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_data14_din,
        img_0_data14_num_data_valid => img_0_data_num_data_valid,
        img_0_data14_fifo_cap => img_0_data_fifo_cap,
        img_0_data14_full_n => img_0_data_full_n,
        img_0_data14_write => AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_data14_write,
        img_0_rows_c_din => AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_rows_c_din,
        img_0_rows_c_num_data_valid => img_0_rows_c_num_data_valid,
        img_0_rows_c_fifo_cap => img_0_rows_c_fifo_cap,
        img_0_rows_c_full_n => img_0_rows_c_full_n,
        img_0_rows_c_write => AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_rows_c_write,
        img_0_cols_c_din => AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_cols_c_din,
        img_0_cols_c_num_data_valid => img_0_cols_c_num_data_valid,
        img_0_cols_c_fifo_cap => img_0_cols_c_fifo_cap,
        img_0_cols_c_full_n => img_0_cols_c_full_n,
        img_0_cols_c_write => AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_cols_c_write);

    rgb2gray_9_0_600_1024_1_2_2_U0 : component Test_area_prmter_rgb2gray_9_0_600_1024_1_2_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => rgb2gray_9_0_600_1024_1_2_2_U0_ap_start,
        start_full_n => start_for_ImgProcess_0_600_1024_1_2_U0_full_n,
        ap_done => rgb2gray_9_0_600_1024_1_2_2_U0_ap_done,
        ap_continue => rgb2gray_9_0_600_1024_1_2_2_U0_ap_continue,
        ap_idle => rgb2gray_9_0_600_1024_1_2_2_U0_ap_idle,
        ap_ready => rgb2gray_9_0_600_1024_1_2_2_U0_ap_ready,
        start_out => rgb2gray_9_0_600_1024_1_2_2_U0_start_out,
        start_write => rgb2gray_9_0_600_1024_1_2_2_U0_start_write,
        p_src_rows_dout => img_0_rows_c_dout,
        p_src_rows_num_data_valid => img_0_rows_c_num_data_valid,
        p_src_rows_fifo_cap => img_0_rows_c_fifo_cap,
        p_src_rows_empty_n => img_0_rows_c_empty_n,
        p_src_rows_read => rgb2gray_9_0_600_1024_1_2_2_U0_p_src_rows_read,
        p_src_cols_dout => img_0_cols_c_dout,
        p_src_cols_num_data_valid => img_0_cols_c_num_data_valid,
        p_src_cols_fifo_cap => img_0_cols_c_fifo_cap,
        p_src_cols_empty_n => img_0_cols_c_empty_n,
        p_src_cols_read => rgb2gray_9_0_600_1024_1_2_2_U0_p_src_cols_read,
        img_0_data14_dout => img_0_data_dout,
        img_0_data14_num_data_valid => img_0_data_num_data_valid,
        img_0_data14_fifo_cap => img_0_data_fifo_cap,
        img_0_data14_empty_n => img_0_data_empty_n,
        img_0_data14_read => rgb2gray_9_0_600_1024_1_2_2_U0_img_0_data14_read,
        img_1_data15_din => rgb2gray_9_0_600_1024_1_2_2_U0_img_1_data15_din,
        img_1_data15_num_data_valid => img_1_data_num_data_valid,
        img_1_data15_fifo_cap => img_1_data_fifo_cap,
        img_1_data15_full_n => img_1_data_full_n,
        img_1_data15_write => rgb2gray_9_0_600_1024_1_2_2_U0_img_1_data15_write);

    ImgProcess_0_600_1024_1_2_U0 : component Test_area_prmter_ImgProcess_0_600_1024_1_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ImgProcess_0_600_1024_1_2_U0_ap_start,
        ap_done => ImgProcess_0_600_1024_1_2_U0_ap_done,
        ap_continue => ImgProcess_0_600_1024_1_2_U0_ap_continue,
        ap_idle => ImgProcess_0_600_1024_1_2_U0_ap_idle,
        ap_ready => ImgProcess_0_600_1024_1_2_U0_ap_ready,
        img_1_data15_dout => img_1_data_dout,
        img_1_data15_num_data_valid => img_1_data_num_data_valid,
        img_1_data15_fifo_cap => img_1_data_fifo_cap,
        img_1_data15_empty_n => img_1_data_empty_n,
        img_1_data15_read => ImgProcess_0_600_1024_1_2_U0_img_1_data15_read,
        ap_return_0 => ImgProcess_0_600_1024_1_2_U0_ap_return_0,
        ap_return_1 => ImgProcess_0_600_1024_1_2_U0_ap_return_1);

    Block_entry15_proc_U0 : component Test_area_prmter_Block_entry15_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_entry15_proc_U0_ap_start,
        ap_done => Block_entry15_proc_U0_ap_done,
        ap_continue => Block_entry15_proc_U0_ap_continue,
        ap_idle => Block_entry15_proc_U0_ap_idle,
        ap_ready => Block_entry15_proc_U0_ap_ready,
        p_read => param1_dout,
        result_Addr_A => Block_entry15_proc_U0_result_Addr_A,
        result_EN_A => Block_entry15_proc_U0_result_EN_A,
        result_WEN_A => Block_entry15_proc_U0_result_WEN_A,
        result_Din_A => Block_entry15_proc_U0_result_Din_A,
        result_Dout_A => ap_const_lv32_0,
        p_read1 => param2_dout);

    img_0_data_U : component Test_area_prmter_fifo_w24_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_data14_din,
        if_full_n => img_0_data_full_n,
        if_write => AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_data14_write,
        if_dout => img_0_data_dout,
        if_num_data_valid => img_0_data_num_data_valid,
        if_fifo_cap => img_0_data_fifo_cap,
        if_empty_n => img_0_data_empty_n,
        if_read => rgb2gray_9_0_600_1024_1_2_2_U0_img_0_data14_read);

    img_0_rows_c_U : component Test_area_prmter_fifo_w10_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_rows_c_din,
        if_full_n => img_0_rows_c_full_n,
        if_write => AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_rows_c_write,
        if_dout => img_0_rows_c_dout,
        if_num_data_valid => img_0_rows_c_num_data_valid,
        if_fifo_cap => img_0_rows_c_fifo_cap,
        if_empty_n => img_0_rows_c_empty_n,
        if_read => rgb2gray_9_0_600_1024_1_2_2_U0_p_src_rows_read);

    img_0_cols_c_U : component Test_area_prmter_fifo_w11_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_cols_c_din,
        if_full_n => img_0_cols_c_full_n,
        if_write => AXIvideo2xfMat_24_9_600_1024_1_2_U0_img_0_cols_c_write,
        if_dout => img_0_cols_c_dout,
        if_num_data_valid => img_0_cols_c_num_data_valid,
        if_fifo_cap => img_0_cols_c_fifo_cap,
        if_empty_n => img_0_cols_c_empty_n,
        if_read => rgb2gray_9_0_600_1024_1_2_2_U0_p_src_cols_read);

    img_1_data_U : component Test_area_prmter_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rgb2gray_9_0_600_1024_1_2_2_U0_img_1_data15_din,
        if_full_n => img_1_data_full_n,
        if_write => rgb2gray_9_0_600_1024_1_2_2_U0_img_1_data15_write,
        if_dout => img_1_data_dout,
        if_num_data_valid => img_1_data_num_data_valid,
        if_fifo_cap => img_1_data_fifo_cap,
        if_empty_n => img_1_data_empty_n,
        if_read => ImgProcess_0_600_1024_1_2_U0_img_1_data15_read);

    param1_U : component Test_area_prmter_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ImgProcess_0_600_1024_1_2_U0_ap_return_0,
        if_full_n => param1_full_n,
        if_write => ap_channel_done_param1,
        if_dout => param1_dout,
        if_num_data_valid => param1_num_data_valid,
        if_fifo_cap => param1_fifo_cap,
        if_empty_n => param1_empty_n,
        if_read => Block_entry15_proc_U0_ap_ready);

    param2_U : component Test_area_prmter_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ImgProcess_0_600_1024_1_2_U0_ap_return_1,
        if_full_n => param2_full_n,
        if_write => ap_channel_done_param2,
        if_dout => param2_dout,
        if_num_data_valid => param2_num_data_valid,
        if_fifo_cap => param2_fifo_cap,
        if_empty_n => param2_empty_n,
        if_read => Block_entry15_proc_U0_ap_ready);

    start_for_rgb2gray_9_0_600_1024_1_2_2_U0_U : component Test_area_prmter_start_for_rgb2gray_9_0_600_1024_1_2_2_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_rgb2gray_9_0_600_1024_1_2_2_U0_din,
        if_full_n => start_for_rgb2gray_9_0_600_1024_1_2_2_U0_full_n,
        if_write => AXIvideo2xfMat_24_9_600_1024_1_2_U0_start_write,
        if_dout => start_for_rgb2gray_9_0_600_1024_1_2_2_U0_dout,
        if_empty_n => start_for_rgb2gray_9_0_600_1024_1_2_2_U0_empty_n,
        if_read => rgb2gray_9_0_600_1024_1_2_2_U0_ap_ready);

    start_for_ImgProcess_0_600_1024_1_2_U0_U : component Test_area_prmter_start_for_ImgProcess_0_600_1024_1_2_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_ImgProcess_0_600_1024_1_2_U0_din,
        if_full_n => start_for_ImgProcess_0_600_1024_1_2_U0_full_n,
        if_write => rgb2gray_9_0_600_1024_1_2_2_U0_start_write,
        if_dout => start_for_ImgProcess_0_600_1024_1_2_U0_dout,
        if_empty_n => start_for_ImgProcess_0_600_1024_1_2_U0_empty_n,
        if_read => ImgProcess_0_600_1024_1_2_U0_ap_ready);





    ap_sync_reg_channel_write_param1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_param1 <= ap_const_logic_0;
            else
                if (((ImgProcess_0_600_1024_1_2_U0_ap_done and ImgProcess_0_600_1024_1_2_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_param1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_param1 <= ap_sync_channel_write_param1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_param2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_param2 <= ap_const_logic_0;
            else
                if (((ImgProcess_0_600_1024_1_2_U0_ap_done and ImgProcess_0_600_1024_1_2_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_param2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_param2 <= ap_sync_channel_write_param2;
                end if; 
            end if;
        end if;
    end process;

    AXIvideo2xfMat_24_9_600_1024_1_2_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2xfMat_24_9_600_1024_1_2_U0_ap_start <= ap_start;
    Block_entry15_proc_U0_ap_continue <= ap_const_logic_1;
    Block_entry15_proc_U0_ap_start <= (param2_empty_n and param1_empty_n);
    INPUT_STREAM_TREADY <= AXIvideo2xfMat_24_9_600_1024_1_2_U0_INPUT_STREAM_TREADY;
    ImgProcess_0_600_1024_1_2_U0_ap_continue <= (ap_sync_channel_write_param2 and ap_sync_channel_write_param1);
    ImgProcess_0_600_1024_1_2_U0_ap_start <= start_for_ImgProcess_0_600_1024_1_2_U0_empty_n;
    ap_channel_done_param1 <= ((ap_sync_reg_channel_write_param1 xor ap_const_logic_1) and ImgProcess_0_600_1024_1_2_U0_ap_done);
    ap_channel_done_param2 <= ((ap_sync_reg_channel_write_param2 xor ap_const_logic_1) and ImgProcess_0_600_1024_1_2_U0_ap_done);
    ap_done <= Block_entry15_proc_U0_ap_done;
    ap_idle <= (rgb2gray_9_0_600_1024_1_2_2_U0_ap_idle and (param2_empty_n xor ap_const_logic_1) and (param1_empty_n xor ap_const_logic_1) and ImgProcess_0_600_1024_1_2_U0_ap_idle and Block_entry15_proc_U0_ap_idle and AXIvideo2xfMat_24_9_600_1024_1_2_U0_ap_idle);
    ap_ready <= AXIvideo2xfMat_24_9_600_1024_1_2_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_channel_write_param1 <= ((param1_full_n and ap_channel_done_param1) or ap_sync_reg_channel_write_param1);
    ap_sync_channel_write_param2 <= ((param2_full_n and ap_channel_done_param2) or ap_sync_reg_channel_write_param2);
    result_Addr_A <= Block_entry15_proc_U0_result_Addr_A;
    result_Clk_A <= ap_clk;
    result_Din_A <= Block_entry15_proc_U0_result_Din_A;
    result_EN_A <= Block_entry15_proc_U0_result_EN_A;
    result_Rst_A <= ap_rst_n_inv;
    result_WEN_A <= Block_entry15_proc_U0_result_WEN_A;
    rgb2gray_9_0_600_1024_1_2_2_U0_ap_continue <= ap_const_logic_1;
    rgb2gray_9_0_600_1024_1_2_2_U0_ap_start <= start_for_rgb2gray_9_0_600_1024_1_2_2_U0_empty_n;
    start_for_ImgProcess_0_600_1024_1_2_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_rgb2gray_9_0_600_1024_1_2_2_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;

-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CAL_Hu_Loop_1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    result_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    result_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    result_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    result_empty_n : IN STD_LOGIC;
    result_read : OUT STD_LOGIC;
    m_axi_RESULT_r_AWVALID : OUT STD_LOGIC;
    m_axi_RESULT_r_AWREADY : IN STD_LOGIC;
    m_axi_RESULT_r_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_RESULT_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_RESULT_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_RESULT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_RESULT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_RESULT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_RESULT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_RESULT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_RESULT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_RESULT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_RESULT_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_RESULT_r_WVALID : OUT STD_LOGIC;
    m_axi_RESULT_r_WREADY : IN STD_LOGIC;
    m_axi_RESULT_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_RESULT_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_RESULT_r_WLAST : OUT STD_LOGIC;
    m_axi_RESULT_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_RESULT_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_RESULT_r_ARVALID : OUT STD_LOGIC;
    m_axi_RESULT_r_ARREADY : IN STD_LOGIC;
    m_axi_RESULT_r_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_RESULT_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_RESULT_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_RESULT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_RESULT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_RESULT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_RESULT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_RESULT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_RESULT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_RESULT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_RESULT_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_RESULT_r_RVALID : IN STD_LOGIC;
    m_axi_RESULT_r_RREADY : OUT STD_LOGIC;
    m_axi_RESULT_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_RESULT_r_RLAST : IN STD_LOGIC;
    m_axi_RESULT_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_RESULT_r_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_RESULT_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_RESULT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_RESULT_r_BVALID : IN STD_LOGIC;
    m_axi_RESULT_r_BREADY : OUT STD_LOGIC;
    m_axi_RESULT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_RESULT_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_RESULT_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    M2int_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    M2int_ce0 : OUT STD_LOGIC;
    M2int_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of CAL_Hu_Loop_1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal result_blk_n : STD_LOGIC;
    signal RESULT_r_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal RESULT_r_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln_reg_87 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_58_ap_start : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_1_fu_58_ap_done : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_1_fu_58_ap_idle : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_1_fu_58_ap_ready : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWVALID : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WVALID : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WLAST : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARVALID : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_RREADY : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_BREADY : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_1_fu_58_M2int_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_58_M2int_ce0 : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_1_fu_58_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sext_ln31_fu_77_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component CAL_Hu_Loop_1_proc_Pipeline_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_RESULT_AWVALID : OUT STD_LOGIC;
        m_axi_RESULT_AWREADY : IN STD_LOGIC;
        m_axi_RESULT_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_RESULT_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_RESULT_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_RESULT_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_RESULT_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_RESULT_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_RESULT_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_RESULT_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_RESULT_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_RESULT_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_RESULT_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_RESULT_WVALID : OUT STD_LOGIC;
        m_axi_RESULT_WREADY : IN STD_LOGIC;
        m_axi_RESULT_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_RESULT_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_RESULT_WLAST : OUT STD_LOGIC;
        m_axi_RESULT_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_RESULT_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_RESULT_ARVALID : OUT STD_LOGIC;
        m_axi_RESULT_ARREADY : IN STD_LOGIC;
        m_axi_RESULT_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_RESULT_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_RESULT_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_RESULT_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_RESULT_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_RESULT_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_RESULT_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_RESULT_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_RESULT_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_RESULT_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_RESULT_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_RESULT_RVALID : IN STD_LOGIC;
        m_axi_RESULT_RREADY : OUT STD_LOGIC;
        m_axi_RESULT_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_RESULT_RLAST : IN STD_LOGIC;
        m_axi_RESULT_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_RESULT_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_RESULT_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_RESULT_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_RESULT_BVALID : IN STD_LOGIC;
        m_axi_RESULT_BREADY : OUT STD_LOGIC;
        m_axi_RESULT_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_RESULT_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_RESULT_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln31 : IN STD_LOGIC_VECTOR (61 downto 0);
        M2int_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        M2int_ce0 : OUT STD_LOGIC;
        M2int_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_Loop_1_proc_Pipeline_1_fu_58 : component CAL_Hu_Loop_1_proc_Pipeline_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Loop_1_proc_Pipeline_1_fu_58_ap_start,
        ap_done => grp_Loop_1_proc_Pipeline_1_fu_58_ap_done,
        ap_idle => grp_Loop_1_proc_Pipeline_1_fu_58_ap_idle,
        ap_ready => grp_Loop_1_proc_Pipeline_1_fu_58_ap_ready,
        m_axi_RESULT_AWVALID => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWVALID,
        m_axi_RESULT_AWREADY => m_axi_RESULT_r_AWREADY,
        m_axi_RESULT_AWADDR => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWADDR,
        m_axi_RESULT_AWID => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWID,
        m_axi_RESULT_AWLEN => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWLEN,
        m_axi_RESULT_AWSIZE => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWSIZE,
        m_axi_RESULT_AWBURST => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWBURST,
        m_axi_RESULT_AWLOCK => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWLOCK,
        m_axi_RESULT_AWCACHE => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWCACHE,
        m_axi_RESULT_AWPROT => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWPROT,
        m_axi_RESULT_AWQOS => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWQOS,
        m_axi_RESULT_AWREGION => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWREGION,
        m_axi_RESULT_AWUSER => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWUSER,
        m_axi_RESULT_WVALID => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WVALID,
        m_axi_RESULT_WREADY => m_axi_RESULT_r_WREADY,
        m_axi_RESULT_WDATA => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WDATA,
        m_axi_RESULT_WSTRB => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WSTRB,
        m_axi_RESULT_WLAST => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WLAST,
        m_axi_RESULT_WID => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WID,
        m_axi_RESULT_WUSER => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WUSER,
        m_axi_RESULT_ARVALID => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARVALID,
        m_axi_RESULT_ARREADY => ap_const_logic_0,
        m_axi_RESULT_ARADDR => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARADDR,
        m_axi_RESULT_ARID => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARID,
        m_axi_RESULT_ARLEN => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARLEN,
        m_axi_RESULT_ARSIZE => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARSIZE,
        m_axi_RESULT_ARBURST => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARBURST,
        m_axi_RESULT_ARLOCK => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARLOCK,
        m_axi_RESULT_ARCACHE => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARCACHE,
        m_axi_RESULT_ARPROT => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARPROT,
        m_axi_RESULT_ARQOS => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARQOS,
        m_axi_RESULT_ARREGION => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARREGION,
        m_axi_RESULT_ARUSER => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARUSER,
        m_axi_RESULT_RVALID => ap_const_logic_0,
        m_axi_RESULT_RREADY => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_RREADY,
        m_axi_RESULT_RDATA => ap_const_lv32_0,
        m_axi_RESULT_RLAST => ap_const_logic_0,
        m_axi_RESULT_RID => ap_const_lv1_0,
        m_axi_RESULT_RFIFONUM => ap_const_lv9_0,
        m_axi_RESULT_RUSER => ap_const_lv1_0,
        m_axi_RESULT_RRESP => ap_const_lv2_0,
        m_axi_RESULT_BVALID => m_axi_RESULT_r_BVALID,
        m_axi_RESULT_BREADY => grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_BREADY,
        m_axi_RESULT_BRESP => m_axi_RESULT_r_BRESP,
        m_axi_RESULT_BID => m_axi_RESULT_r_BID,
        m_axi_RESULT_BUSER => m_axi_RESULT_r_BUSER,
        sext_ln31 => trunc_ln_reg_87,
        M2int_address0 => grp_Loop_1_proc_Pipeline_1_fu_58_M2int_address0,
        M2int_ce0 => grp_Loop_1_proc_Pipeline_1_fu_58_M2int_ce0,
        M2int_q0 => M2int_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((m_axi_RESULT_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_Loop_1_proc_Pipeline_1_fu_58_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Loop_1_proc_Pipeline_1_fu_58_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_Loop_1_proc_Pipeline_1_fu_58_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Loop_1_proc_Pipeline_1_fu_58_ap_ready = ap_const_logic_1)) then 
                    grp_Loop_1_proc_Pipeline_1_fu_58_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                trunc_ln_reg_87 <= result_dout(63 downto 2);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, result_empty_n, m_axi_RESULT_r_AWREADY, m_axi_RESULT_r_BVALID, ap_CS_fsm_state2, ap_CS_fsm_state9, grp_Loop_1_proc_Pipeline_1_fu_58_ap_done, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((result_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((m_axi_RESULT_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_Loop_1_proc_Pipeline_1_fu_58_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((m_axi_RESULT_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    M2int_address0 <= grp_Loop_1_proc_Pipeline_1_fu_58_M2int_address0;
    M2int_ce0 <= grp_Loop_1_proc_Pipeline_1_fu_58_M2int_ce0;

    RESULT_r_blk_n_AW_assign_proc : process(m_axi_RESULT_r_AWREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            RESULT_r_blk_n_AW <= m_axi_RESULT_r_AWREADY;
        else 
            RESULT_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    RESULT_r_blk_n_B_assign_proc : process(m_axi_RESULT_r_BVALID, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            RESULT_r_blk_n_B <= m_axi_RESULT_r_BVALID;
        else 
            RESULT_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, result_empty_n)
    begin
        if (((result_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(m_axi_RESULT_r_AWREADY)
    begin
        if ((m_axi_RESULT_r_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_Loop_1_proc_Pipeline_1_fu_58_ap_done)
    begin
        if ((grp_Loop_1_proc_Pipeline_1_fu_58_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_ST_fsm_state9_blk_assign_proc : process(m_axi_RESULT_r_BVALID)
    begin
        if ((m_axi_RESULT_r_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, result_empty_n)
    begin
                ap_block_state1 <= ((result_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, m_axi_RESULT_r_BVALID, ap_CS_fsm_state9)
    begin
        if (((m_axi_RESULT_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_RESULT_r_BVALID, ap_CS_fsm_state9)
    begin
        if (((m_axi_RESULT_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_Loop_1_proc_Pipeline_1_fu_58_ap_start <= grp_Loop_1_proc_Pipeline_1_fu_58_ap_start_reg;
    m_axi_RESULT_r_ARADDR <= ap_const_lv64_0;
    m_axi_RESULT_r_ARBURST <= ap_const_lv2_0;
    m_axi_RESULT_r_ARCACHE <= ap_const_lv4_0;
    m_axi_RESULT_r_ARID <= ap_const_lv1_0;
    m_axi_RESULT_r_ARLEN <= ap_const_lv32_0;
    m_axi_RESULT_r_ARLOCK <= ap_const_lv2_0;
    m_axi_RESULT_r_ARPROT <= ap_const_lv3_0;
    m_axi_RESULT_r_ARQOS <= ap_const_lv4_0;
    m_axi_RESULT_r_ARREGION <= ap_const_lv4_0;
    m_axi_RESULT_r_ARSIZE <= ap_const_lv3_0;
    m_axi_RESULT_r_ARUSER <= ap_const_lv1_0;
    m_axi_RESULT_r_ARVALID <= ap_const_logic_0;

    m_axi_RESULT_r_AWADDR_assign_proc : process(m_axi_RESULT_r_AWREADY, ap_CS_fsm_state2, grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWADDR, ap_CS_fsm_state3, ap_CS_fsm_state4, sext_ln31_fu_77_p1)
    begin
        if (((m_axi_RESULT_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_RESULT_r_AWADDR <= sext_ln31_fu_77_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_RESULT_r_AWADDR <= grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWADDR;
        else 
            m_axi_RESULT_r_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_RESULT_r_AWBURST_assign_proc : process(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWBURST, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_RESULT_r_AWBURST <= grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWBURST;
        else 
            m_axi_RESULT_r_AWBURST <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_RESULT_r_AWCACHE_assign_proc : process(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWCACHE, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_RESULT_r_AWCACHE <= grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWCACHE;
        else 
            m_axi_RESULT_r_AWCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_RESULT_r_AWID_assign_proc : process(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWID, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_RESULT_r_AWID <= grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWID;
        else 
            m_axi_RESULT_r_AWID <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_RESULT_r_AWLEN_assign_proc : process(m_axi_RESULT_r_AWREADY, ap_CS_fsm_state2, grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWLEN, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((m_axi_RESULT_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_RESULT_r_AWLEN <= ap_const_lv32_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_RESULT_r_AWLEN <= grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWLEN;
        else 
            m_axi_RESULT_r_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_RESULT_r_AWLOCK_assign_proc : process(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWLOCK, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_RESULT_r_AWLOCK <= grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWLOCK;
        else 
            m_axi_RESULT_r_AWLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_RESULT_r_AWPROT_assign_proc : process(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWPROT, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_RESULT_r_AWPROT <= grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWPROT;
        else 
            m_axi_RESULT_r_AWPROT <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_RESULT_r_AWQOS_assign_proc : process(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWQOS, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_RESULT_r_AWQOS <= grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWQOS;
        else 
            m_axi_RESULT_r_AWQOS <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_RESULT_r_AWREGION_assign_proc : process(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWREGION, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_RESULT_r_AWREGION <= grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWREGION;
        else 
            m_axi_RESULT_r_AWREGION <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_RESULT_r_AWSIZE_assign_proc : process(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWSIZE, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_RESULT_r_AWSIZE <= grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWSIZE;
        else 
            m_axi_RESULT_r_AWSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_RESULT_r_AWUSER_assign_proc : process(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWUSER, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_RESULT_r_AWUSER <= grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWUSER;
        else 
            m_axi_RESULT_r_AWUSER <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_RESULT_r_AWVALID_assign_proc : process(m_axi_RESULT_r_AWREADY, ap_CS_fsm_state2, grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWVALID, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((m_axi_RESULT_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_RESULT_r_AWVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_RESULT_r_AWVALID <= grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWVALID;
        else 
            m_axi_RESULT_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_RESULT_r_BREADY_assign_proc : process(m_axi_RESULT_r_BVALID, ap_CS_fsm_state9, grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_BREADY, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((m_axi_RESULT_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_RESULT_r_BREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_RESULT_r_BREADY <= grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_BREADY;
        else 
            m_axi_RESULT_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_RESULT_r_RREADY <= ap_const_logic_0;
    m_axi_RESULT_r_WDATA <= grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WDATA;
    m_axi_RESULT_r_WID <= grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WID;
    m_axi_RESULT_r_WLAST <= grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WLAST;
    m_axi_RESULT_r_WSTRB <= grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WSTRB;
    m_axi_RESULT_r_WUSER <= grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WUSER;

    m_axi_RESULT_r_WVALID_assign_proc : process(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WVALID, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_RESULT_r_WVALID <= grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WVALID;
        else 
            m_axi_RESULT_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    result_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, result_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            result_blk_n <= result_empty_n;
        else 
            result_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    result_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, result_empty_n)
    begin
        if ((not(((result_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            result_read <= ap_const_logic_1;
        else 
            result_read <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln31_fu_77_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_87),64));

end behav;

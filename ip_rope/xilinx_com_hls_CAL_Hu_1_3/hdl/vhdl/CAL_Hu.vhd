-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CAL_Hu is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_RESULT_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_RESULT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_RESULT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RESULT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_RESULT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RESULT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RESULT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RESULT_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RESULT_USER_VALUE : INTEGER := 0;
    C_M_AXI_RESULT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_RESULT_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_RESULT_AWVALID : OUT STD_LOGIC;
    m_axi_RESULT_AWREADY : IN STD_LOGIC;
    m_axi_RESULT_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_ADDR_WIDTH-1 downto 0);
    m_axi_RESULT_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_ID_WIDTH-1 downto 0);
    m_axi_RESULT_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_RESULT_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_RESULT_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_RESULT_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_RESULT_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_RESULT_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_RESULT_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_RESULT_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_RESULT_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_AWUSER_WIDTH-1 downto 0);
    m_axi_RESULT_WVALID : OUT STD_LOGIC;
    m_axi_RESULT_WREADY : IN STD_LOGIC;
    m_axi_RESULT_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_DATA_WIDTH-1 downto 0);
    m_axi_RESULT_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_DATA_WIDTH/8-1 downto 0);
    m_axi_RESULT_WLAST : OUT STD_LOGIC;
    m_axi_RESULT_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_ID_WIDTH-1 downto 0);
    m_axi_RESULT_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_WUSER_WIDTH-1 downto 0);
    m_axi_RESULT_ARVALID : OUT STD_LOGIC;
    m_axi_RESULT_ARREADY : IN STD_LOGIC;
    m_axi_RESULT_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_ADDR_WIDTH-1 downto 0);
    m_axi_RESULT_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_ID_WIDTH-1 downto 0);
    m_axi_RESULT_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_RESULT_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_RESULT_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_RESULT_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_RESULT_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_RESULT_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_RESULT_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_RESULT_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_RESULT_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_ARUSER_WIDTH-1 downto 0);
    m_axi_RESULT_RVALID : IN STD_LOGIC;
    m_axi_RESULT_RREADY : OUT STD_LOGIC;
    m_axi_RESULT_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_RESULT_DATA_WIDTH-1 downto 0);
    m_axi_RESULT_RLAST : IN STD_LOGIC;
    m_axi_RESULT_RID : IN STD_LOGIC_VECTOR (C_M_AXI_RESULT_ID_WIDTH-1 downto 0);
    m_axi_RESULT_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RESULT_RUSER_WIDTH-1 downto 0);
    m_axi_RESULT_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_RESULT_BVALID : IN STD_LOGIC;
    m_axi_RESULT_BREADY : OUT STD_LOGIC;
    m_axi_RESULT_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_RESULT_BID : IN STD_LOGIC_VECTOR (C_M_AXI_RESULT_ID_WIDTH-1 downto 0);
    m_axi_RESULT_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RESULT_BUSER_WIDTH-1 downto 0);
    INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TVALID : IN STD_LOGIC;
    INPUT_STREAM_TREADY : OUT STD_LOGIC );
end;


architecture behav of CAL_Hu is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "CAL_Hu_CAL_Hu,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=1242992,HLS_SYN_TPT=1242969,HLS_SYN_MEM=67,HLS_SYN_DSP=0,HLS_SYN_FF=10667,HLS_SYN_LUT=17497,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal M2int_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal M2int_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal result_r : STD_LOGIC_VECTOR (63 downto 0);
    signal RESULT_AWREADY : STD_LOGIC;
    signal RESULT_WREADY : STD_LOGIC;
    signal RESULT_ARREADY : STD_LOGIC;
    signal RESULT_RVALID : STD_LOGIC;
    signal RESULT_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal RESULT_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal RESULT_BVALID : STD_LOGIC;
    signal RESULT_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal RESULT_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal RESULT_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_result_c_din : STD_LOGIC_VECTOR (63 downto 0);
    signal entry_proc_U0_result_c_write : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_300_512_1_2_U0_ap_start : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_300_512_1_2_U0_ap_done : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_300_512_1_2_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_300_512_1_2_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_300_512_1_2_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_300_512_1_2_U0_start_out : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_300_512_1_2_U0_start_write : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_300_512_1_2_U0_INPUT_STREAM_TREADY : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_300_512_1_2_U0_img_0_data14_din : STD_LOGIC_VECTOR (23 downto 0);
    signal AXIvideo2xfMat_24_9_300_512_1_2_U0_img_0_data14_write : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_300_512_1_2_U0_img_0_rows_c_din : STD_LOGIC_VECTOR (8 downto 0);
    signal AXIvideo2xfMat_24_9_300_512_1_2_U0_img_0_rows_c_write : STD_LOGIC;
    signal AXIvideo2xfMat_24_9_300_512_1_2_U0_img_0_cols_c_din : STD_LOGIC_VECTOR (9 downto 0);
    signal AXIvideo2xfMat_24_9_300_512_1_2_U0_img_0_cols_c_write : STD_LOGIC;
    signal rgb2gray_9_0_300_512_1_2_2_U0_ap_start : STD_LOGIC;
    signal rgb2gray_9_0_300_512_1_2_2_U0_ap_done : STD_LOGIC;
    signal rgb2gray_9_0_300_512_1_2_2_U0_ap_continue : STD_LOGIC;
    signal rgb2gray_9_0_300_512_1_2_2_U0_ap_idle : STD_LOGIC;
    signal rgb2gray_9_0_300_512_1_2_2_U0_ap_ready : STD_LOGIC;
    signal rgb2gray_9_0_300_512_1_2_2_U0_start_out : STD_LOGIC;
    signal rgb2gray_9_0_300_512_1_2_2_U0_start_write : STD_LOGIC;
    signal rgb2gray_9_0_300_512_1_2_2_U0_p_src_rows_read : STD_LOGIC;
    signal rgb2gray_9_0_300_512_1_2_2_U0_p_src_cols_read : STD_LOGIC;
    signal rgb2gray_9_0_300_512_1_2_2_U0_img_0_data14_read : STD_LOGIC;
    signal rgb2gray_9_0_300_512_1_2_2_U0_img_1_data15_din : STD_LOGIC_VECTOR (7 downto 0);
    signal rgb2gray_9_0_300_512_1_2_2_U0_img_1_data15_write : STD_LOGIC;
    signal HuMoment_0_300_512_1_2_U0_ap_start : STD_LOGIC;
    signal HuMoment_0_300_512_1_2_U0_ap_done : STD_LOGIC;
    signal HuMoment_0_300_512_1_2_U0_ap_continue : STD_LOGIC;
    signal HuMoment_0_300_512_1_2_U0_ap_idle : STD_LOGIC;
    signal HuMoment_0_300_512_1_2_U0_ap_ready : STD_LOGIC;
    signal HuMoment_0_300_512_1_2_U0_img_1_data15_read : STD_LOGIC;
    signal HuMoment_0_300_512_1_2_U0_M2int_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal HuMoment_0_300_512_1_2_U0_M2int_ce0 : STD_LOGIC;
    signal HuMoment_0_300_512_1_2_U0_M2int_we0 : STD_LOGIC;
    signal HuMoment_0_300_512_1_2_U0_M2int_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc_U0_ap_start : STD_LOGIC;
    signal Loop_1_proc_U0_ap_done : STD_LOGIC;
    signal Loop_1_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_1_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_1_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_1_proc_U0_result_read : STD_LOGIC;
    signal Loop_1_proc_U0_m_axi_RESULT_r_AWVALID : STD_LOGIC;
    signal Loop_1_proc_U0_m_axi_RESULT_r_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Loop_1_proc_U0_m_axi_RESULT_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_1_proc_U0_m_axi_RESULT_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc_U0_m_axi_RESULT_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_1_proc_U0_m_axi_RESULT_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_1_proc_U0_m_axi_RESULT_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_1_proc_U0_m_axi_RESULT_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc_U0_m_axi_RESULT_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_1_proc_U0_m_axi_RESULT_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc_U0_m_axi_RESULT_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc_U0_m_axi_RESULT_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_1_proc_U0_m_axi_RESULT_r_WVALID : STD_LOGIC;
    signal Loop_1_proc_U0_m_axi_RESULT_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc_U0_m_axi_RESULT_r_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc_U0_m_axi_RESULT_r_WLAST : STD_LOGIC;
    signal Loop_1_proc_U0_m_axi_RESULT_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_1_proc_U0_m_axi_RESULT_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_1_proc_U0_m_axi_RESULT_r_ARVALID : STD_LOGIC;
    signal Loop_1_proc_U0_m_axi_RESULT_r_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Loop_1_proc_U0_m_axi_RESULT_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_1_proc_U0_m_axi_RESULT_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc_U0_m_axi_RESULT_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_1_proc_U0_m_axi_RESULT_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_1_proc_U0_m_axi_RESULT_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_1_proc_U0_m_axi_RESULT_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc_U0_m_axi_RESULT_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_1_proc_U0_m_axi_RESULT_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc_U0_m_axi_RESULT_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc_U0_m_axi_RESULT_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_1_proc_U0_m_axi_RESULT_r_RREADY : STD_LOGIC;
    signal Loop_1_proc_U0_m_axi_RESULT_r_BREADY : STD_LOGIC;
    signal Loop_1_proc_U0_M2int_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_1_proc_U0_M2int_ce0 : STD_LOGIC;
    signal M2int_i_full_n : STD_LOGIC;
    signal M2int_t_empty_n : STD_LOGIC;
    signal result_c_full_n : STD_LOGIC;
    signal result_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal result_c_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal result_c_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal result_c_empty_n : STD_LOGIC;
    signal img_0_data_full_n : STD_LOGIC;
    signal img_0_data_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal img_0_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal img_0_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal img_0_data_empty_n : STD_LOGIC;
    signal img_0_rows_c_full_n : STD_LOGIC;
    signal img_0_rows_c_dout : STD_LOGIC_VECTOR (8 downto 0);
    signal img_0_rows_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal img_0_rows_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal img_0_rows_c_empty_n : STD_LOGIC;
    signal img_0_cols_c_full_n : STD_LOGIC;
    signal img_0_cols_c_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal img_0_cols_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal img_0_cols_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal img_0_cols_c_empty_n : STD_LOGIC;
    signal img_1_data_full_n : STD_LOGIC;
    signal img_1_data_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal img_1_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal img_1_data_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_AXIvideo2xfMat_24_9_300_512_1_2_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_AXIvideo2xfMat_24_9_300_512_1_2_U0_ap_ready : STD_LOGIC;
    signal start_for_rgb2gray_9_0_300_512_1_2_2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_rgb2gray_9_0_300_512_1_2_2_U0_full_n : STD_LOGIC;
    signal start_for_rgb2gray_9_0_300_512_1_2_2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_rgb2gray_9_0_300_512_1_2_2_U0_empty_n : STD_LOGIC;
    signal start_for_HuMoment_0_300_512_1_2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_HuMoment_0_300_512_1_2_U0_full_n : STD_LOGIC;
    signal start_for_HuMoment_0_300_512_1_2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_HuMoment_0_300_512_1_2_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component CAL_Hu_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        result : IN STD_LOGIC_VECTOR (63 downto 0);
        result_c_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        result_c_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        result_c_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        result_c_full_n : IN STD_LOGIC;
        result_c_write : OUT STD_LOGIC );
    end component;


    component CAL_Hu_AXIvideo2xfMat_24_9_300_512_1_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        INPUT_STREAM_TVALID : IN STD_LOGIC;
        INPUT_STREAM_TREADY : OUT STD_LOGIC;
        INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_0_data14_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        img_0_data14_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_0_data14_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_0_data14_full_n : IN STD_LOGIC;
        img_0_data14_write : OUT STD_LOGIC;
        img_0_rows_c_din : OUT STD_LOGIC_VECTOR (8 downto 0);
        img_0_rows_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_0_rows_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_0_rows_c_full_n : IN STD_LOGIC;
        img_0_rows_c_write : OUT STD_LOGIC;
        img_0_cols_c_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        img_0_cols_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_0_cols_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_0_cols_c_full_n : IN STD_LOGIC;
        img_0_cols_c_write : OUT STD_LOGIC );
    end component;


    component CAL_Hu_rgb2gray_9_0_300_512_1_2_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_rows_dout : IN STD_LOGIC_VECTOR (8 downto 0);
        p_src_rows_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        p_src_rows_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        p_src_rows_empty_n : IN STD_LOGIC;
        p_src_rows_read : OUT STD_LOGIC;
        p_src_cols_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        p_src_cols_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        p_src_cols_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        p_src_cols_empty_n : IN STD_LOGIC;
        p_src_cols_read : OUT STD_LOGIC;
        img_0_data14_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        img_0_data14_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_0_data14_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_0_data14_empty_n : IN STD_LOGIC;
        img_0_data14_read : OUT STD_LOGIC;
        img_1_data15_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_1_data15_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_1_data15_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_1_data15_full_n : IN STD_LOGIC;
        img_1_data15_write : OUT STD_LOGIC );
    end component;


    component CAL_Hu_HuMoment_0_300_512_1_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_1_data15_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_1_data15_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_1_data15_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_1_data15_empty_n : IN STD_LOGIC;
        img_1_data15_read : OUT STD_LOGIC;
        M2int_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        M2int_ce0 : OUT STD_LOGIC;
        M2int_we0 : OUT STD_LOGIC;
        M2int_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CAL_Hu_Loop_1_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        result_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        result_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        result_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        result_empty_n : IN STD_LOGIC;
        result_read : OUT STD_LOGIC;
        m_axi_RESULT_r_AWVALID : OUT STD_LOGIC;
        m_axi_RESULT_r_AWREADY : IN STD_LOGIC;
        m_axi_RESULT_r_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_RESULT_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_RESULT_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_RESULT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_RESULT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_RESULT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_RESULT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_RESULT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_RESULT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_RESULT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_RESULT_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_RESULT_r_WVALID : OUT STD_LOGIC;
        m_axi_RESULT_r_WREADY : IN STD_LOGIC;
        m_axi_RESULT_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_RESULT_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_RESULT_r_WLAST : OUT STD_LOGIC;
        m_axi_RESULT_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_RESULT_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_RESULT_r_ARVALID : OUT STD_LOGIC;
        m_axi_RESULT_r_ARREADY : IN STD_LOGIC;
        m_axi_RESULT_r_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_RESULT_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_RESULT_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_RESULT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_RESULT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_RESULT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_RESULT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_RESULT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_RESULT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_RESULT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_RESULT_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_RESULT_r_RVALID : IN STD_LOGIC;
        m_axi_RESULT_r_RREADY : OUT STD_LOGIC;
        m_axi_RESULT_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_RESULT_r_RLAST : IN STD_LOGIC;
        m_axi_RESULT_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_RESULT_r_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_RESULT_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_RESULT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_RESULT_r_BVALID : IN STD_LOGIC;
        m_axi_RESULT_r_BREADY : OUT STD_LOGIC;
        m_axi_RESULT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_RESULT_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_RESULT_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        M2int_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        M2int_ce0 : OUT STD_LOGIC;
        M2int_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CAL_Hu_M2int_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component CAL_Hu_fifo_w64_d6_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component CAL_Hu_fifo_w24_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (23 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (23 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component CAL_Hu_fifo_w9_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (8 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (8 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component CAL_Hu_fifo_w10_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component CAL_Hu_fifo_w8_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component CAL_Hu_start_for_rgb2gray_9_0_300_512_1_2_2_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component CAL_Hu_start_for_HuMoment_0_300_512_1_2_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component CAL_Hu_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component CAL_Hu_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        result_r : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CAL_Hu_RESULT_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    M2int_U : component CAL_Hu_M2int_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => HuMoment_0_300_512_1_2_U0_M2int_address0,
        i_ce0 => HuMoment_0_300_512_1_2_U0_M2int_ce0,
        i_we0 => HuMoment_0_300_512_1_2_U0_M2int_we0,
        i_d0 => HuMoment_0_300_512_1_2_U0_M2int_d0,
        i_q0 => M2int_i_q0,
        t_address0 => Loop_1_proc_U0_M2int_address0,
        t_ce0 => Loop_1_proc_U0_M2int_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => M2int_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => M2int_i_full_n,
        i_write => HuMoment_0_300_512_1_2_U0_ap_done,
        t_empty_n => M2int_t_empty_n,
        t_read => Loop_1_proc_U0_ap_ready);

    CONTROL_BUS_s_axi_U : component CAL_Hu_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    control_s_axi_U : component CAL_Hu_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        result_r => result_r);

    RESULT_m_axi_U : component CAL_Hu_RESULT_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_RESULT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_RESULT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_RESULT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_RESULT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_RESULT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_RESULT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_RESULT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_RESULT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_RESULT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_RESULT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_RESULT_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_RESULT_AWVALID,
        AWREADY => m_axi_RESULT_AWREADY,
        AWADDR => m_axi_RESULT_AWADDR,
        AWID => m_axi_RESULT_AWID,
        AWLEN => m_axi_RESULT_AWLEN,
        AWSIZE => m_axi_RESULT_AWSIZE,
        AWBURST => m_axi_RESULT_AWBURST,
        AWLOCK => m_axi_RESULT_AWLOCK,
        AWCACHE => m_axi_RESULT_AWCACHE,
        AWPROT => m_axi_RESULT_AWPROT,
        AWQOS => m_axi_RESULT_AWQOS,
        AWREGION => m_axi_RESULT_AWREGION,
        AWUSER => m_axi_RESULT_AWUSER,
        WVALID => m_axi_RESULT_WVALID,
        WREADY => m_axi_RESULT_WREADY,
        WDATA => m_axi_RESULT_WDATA,
        WSTRB => m_axi_RESULT_WSTRB,
        WLAST => m_axi_RESULT_WLAST,
        WID => m_axi_RESULT_WID,
        WUSER => m_axi_RESULT_WUSER,
        ARVALID => m_axi_RESULT_ARVALID,
        ARREADY => m_axi_RESULT_ARREADY,
        ARADDR => m_axi_RESULT_ARADDR,
        ARID => m_axi_RESULT_ARID,
        ARLEN => m_axi_RESULT_ARLEN,
        ARSIZE => m_axi_RESULT_ARSIZE,
        ARBURST => m_axi_RESULT_ARBURST,
        ARLOCK => m_axi_RESULT_ARLOCK,
        ARCACHE => m_axi_RESULT_ARCACHE,
        ARPROT => m_axi_RESULT_ARPROT,
        ARQOS => m_axi_RESULT_ARQOS,
        ARREGION => m_axi_RESULT_ARREGION,
        ARUSER => m_axi_RESULT_ARUSER,
        RVALID => m_axi_RESULT_RVALID,
        RREADY => m_axi_RESULT_RREADY,
        RDATA => m_axi_RESULT_RDATA,
        RLAST => m_axi_RESULT_RLAST,
        RID => m_axi_RESULT_RID,
        RUSER => m_axi_RESULT_RUSER,
        RRESP => m_axi_RESULT_RRESP,
        BVALID => m_axi_RESULT_BVALID,
        BREADY => m_axi_RESULT_BREADY,
        BRESP => m_axi_RESULT_BRESP,
        BID => m_axi_RESULT_BID,
        BUSER => m_axi_RESULT_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => RESULT_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => RESULT_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => RESULT_RDATA,
        I_RFIFONUM => RESULT_RFIFONUM,
        I_AWVALID => Loop_1_proc_U0_m_axi_RESULT_r_AWVALID,
        I_AWREADY => RESULT_AWREADY,
        I_AWADDR => Loop_1_proc_U0_m_axi_RESULT_r_AWADDR,
        I_AWLEN => Loop_1_proc_U0_m_axi_RESULT_r_AWLEN,
        I_WVALID => Loop_1_proc_U0_m_axi_RESULT_r_WVALID,
        I_WREADY => RESULT_WREADY,
        I_WDATA => Loop_1_proc_U0_m_axi_RESULT_r_WDATA,
        I_WSTRB => Loop_1_proc_U0_m_axi_RESULT_r_WSTRB,
        I_BVALID => RESULT_BVALID,
        I_BREADY => Loop_1_proc_U0_m_axi_RESULT_r_BREADY);

    entry_proc_U0 : component CAL_Hu_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => entry_proc_U0_ap_start,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        result => result_r,
        result_c_din => entry_proc_U0_result_c_din,
        result_c_num_data_valid => result_c_num_data_valid,
        result_c_fifo_cap => result_c_fifo_cap,
        result_c_full_n => result_c_full_n,
        result_c_write => entry_proc_U0_result_c_write);

    AXIvideo2xfMat_24_9_300_512_1_2_U0 : component CAL_Hu_AXIvideo2xfMat_24_9_300_512_1_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIvideo2xfMat_24_9_300_512_1_2_U0_ap_start,
        start_full_n => start_for_rgb2gray_9_0_300_512_1_2_2_U0_full_n,
        ap_done => AXIvideo2xfMat_24_9_300_512_1_2_U0_ap_done,
        ap_continue => AXIvideo2xfMat_24_9_300_512_1_2_U0_ap_continue,
        ap_idle => AXIvideo2xfMat_24_9_300_512_1_2_U0_ap_idle,
        ap_ready => AXIvideo2xfMat_24_9_300_512_1_2_U0_ap_ready,
        start_out => AXIvideo2xfMat_24_9_300_512_1_2_U0_start_out,
        start_write => AXIvideo2xfMat_24_9_300_512_1_2_U0_start_write,
        INPUT_STREAM_TDATA => INPUT_STREAM_TDATA,
        INPUT_STREAM_TVALID => INPUT_STREAM_TVALID,
        INPUT_STREAM_TREADY => AXIvideo2xfMat_24_9_300_512_1_2_U0_INPUT_STREAM_TREADY,
        INPUT_STREAM_TKEEP => INPUT_STREAM_TKEEP,
        INPUT_STREAM_TSTRB => INPUT_STREAM_TSTRB,
        INPUT_STREAM_TUSER => INPUT_STREAM_TUSER,
        INPUT_STREAM_TLAST => INPUT_STREAM_TLAST,
        INPUT_STREAM_TID => INPUT_STREAM_TID,
        INPUT_STREAM_TDEST => INPUT_STREAM_TDEST,
        img_0_data14_din => AXIvideo2xfMat_24_9_300_512_1_2_U0_img_0_data14_din,
        img_0_data14_num_data_valid => img_0_data_num_data_valid,
        img_0_data14_fifo_cap => img_0_data_fifo_cap,
        img_0_data14_full_n => img_0_data_full_n,
        img_0_data14_write => AXIvideo2xfMat_24_9_300_512_1_2_U0_img_0_data14_write,
        img_0_rows_c_din => AXIvideo2xfMat_24_9_300_512_1_2_U0_img_0_rows_c_din,
        img_0_rows_c_num_data_valid => img_0_rows_c_num_data_valid,
        img_0_rows_c_fifo_cap => img_0_rows_c_fifo_cap,
        img_0_rows_c_full_n => img_0_rows_c_full_n,
        img_0_rows_c_write => AXIvideo2xfMat_24_9_300_512_1_2_U0_img_0_rows_c_write,
        img_0_cols_c_din => AXIvideo2xfMat_24_9_300_512_1_2_U0_img_0_cols_c_din,
        img_0_cols_c_num_data_valid => img_0_cols_c_num_data_valid,
        img_0_cols_c_fifo_cap => img_0_cols_c_fifo_cap,
        img_0_cols_c_full_n => img_0_cols_c_full_n,
        img_0_cols_c_write => AXIvideo2xfMat_24_9_300_512_1_2_U0_img_0_cols_c_write);

    rgb2gray_9_0_300_512_1_2_2_U0 : component CAL_Hu_rgb2gray_9_0_300_512_1_2_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => rgb2gray_9_0_300_512_1_2_2_U0_ap_start,
        start_full_n => start_for_HuMoment_0_300_512_1_2_U0_full_n,
        ap_done => rgb2gray_9_0_300_512_1_2_2_U0_ap_done,
        ap_continue => rgb2gray_9_0_300_512_1_2_2_U0_ap_continue,
        ap_idle => rgb2gray_9_0_300_512_1_2_2_U0_ap_idle,
        ap_ready => rgb2gray_9_0_300_512_1_2_2_U0_ap_ready,
        start_out => rgb2gray_9_0_300_512_1_2_2_U0_start_out,
        start_write => rgb2gray_9_0_300_512_1_2_2_U0_start_write,
        p_src_rows_dout => img_0_rows_c_dout,
        p_src_rows_num_data_valid => img_0_rows_c_num_data_valid,
        p_src_rows_fifo_cap => img_0_rows_c_fifo_cap,
        p_src_rows_empty_n => img_0_rows_c_empty_n,
        p_src_rows_read => rgb2gray_9_0_300_512_1_2_2_U0_p_src_rows_read,
        p_src_cols_dout => img_0_cols_c_dout,
        p_src_cols_num_data_valid => img_0_cols_c_num_data_valid,
        p_src_cols_fifo_cap => img_0_cols_c_fifo_cap,
        p_src_cols_empty_n => img_0_cols_c_empty_n,
        p_src_cols_read => rgb2gray_9_0_300_512_1_2_2_U0_p_src_cols_read,
        img_0_data14_dout => img_0_data_dout,
        img_0_data14_num_data_valid => img_0_data_num_data_valid,
        img_0_data14_fifo_cap => img_0_data_fifo_cap,
        img_0_data14_empty_n => img_0_data_empty_n,
        img_0_data14_read => rgb2gray_9_0_300_512_1_2_2_U0_img_0_data14_read,
        img_1_data15_din => rgb2gray_9_0_300_512_1_2_2_U0_img_1_data15_din,
        img_1_data15_num_data_valid => img_1_data_num_data_valid,
        img_1_data15_fifo_cap => img_1_data_fifo_cap,
        img_1_data15_full_n => img_1_data_full_n,
        img_1_data15_write => rgb2gray_9_0_300_512_1_2_2_U0_img_1_data15_write);

    HuMoment_0_300_512_1_2_U0 : component CAL_Hu_HuMoment_0_300_512_1_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => HuMoment_0_300_512_1_2_U0_ap_start,
        ap_done => HuMoment_0_300_512_1_2_U0_ap_done,
        ap_continue => HuMoment_0_300_512_1_2_U0_ap_continue,
        ap_idle => HuMoment_0_300_512_1_2_U0_ap_idle,
        ap_ready => HuMoment_0_300_512_1_2_U0_ap_ready,
        img_1_data15_dout => img_1_data_dout,
        img_1_data15_num_data_valid => img_1_data_num_data_valid,
        img_1_data15_fifo_cap => img_1_data_fifo_cap,
        img_1_data15_empty_n => img_1_data_empty_n,
        img_1_data15_read => HuMoment_0_300_512_1_2_U0_img_1_data15_read,
        M2int_address0 => HuMoment_0_300_512_1_2_U0_M2int_address0,
        M2int_ce0 => HuMoment_0_300_512_1_2_U0_M2int_ce0,
        M2int_we0 => HuMoment_0_300_512_1_2_U0_M2int_we0,
        M2int_d0 => HuMoment_0_300_512_1_2_U0_M2int_d0);

    Loop_1_proc_U0 : component CAL_Hu_Loop_1_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_1_proc_U0_ap_start,
        ap_done => Loop_1_proc_U0_ap_done,
        ap_continue => Loop_1_proc_U0_ap_continue,
        ap_idle => Loop_1_proc_U0_ap_idle,
        ap_ready => Loop_1_proc_U0_ap_ready,
        result_dout => result_c_dout,
        result_num_data_valid => result_c_num_data_valid,
        result_fifo_cap => result_c_fifo_cap,
        result_empty_n => result_c_empty_n,
        result_read => Loop_1_proc_U0_result_read,
        m_axi_RESULT_r_AWVALID => Loop_1_proc_U0_m_axi_RESULT_r_AWVALID,
        m_axi_RESULT_r_AWREADY => RESULT_AWREADY,
        m_axi_RESULT_r_AWADDR => Loop_1_proc_U0_m_axi_RESULT_r_AWADDR,
        m_axi_RESULT_r_AWID => Loop_1_proc_U0_m_axi_RESULT_r_AWID,
        m_axi_RESULT_r_AWLEN => Loop_1_proc_U0_m_axi_RESULT_r_AWLEN,
        m_axi_RESULT_r_AWSIZE => Loop_1_proc_U0_m_axi_RESULT_r_AWSIZE,
        m_axi_RESULT_r_AWBURST => Loop_1_proc_U0_m_axi_RESULT_r_AWBURST,
        m_axi_RESULT_r_AWLOCK => Loop_1_proc_U0_m_axi_RESULT_r_AWLOCK,
        m_axi_RESULT_r_AWCACHE => Loop_1_proc_U0_m_axi_RESULT_r_AWCACHE,
        m_axi_RESULT_r_AWPROT => Loop_1_proc_U0_m_axi_RESULT_r_AWPROT,
        m_axi_RESULT_r_AWQOS => Loop_1_proc_U0_m_axi_RESULT_r_AWQOS,
        m_axi_RESULT_r_AWREGION => Loop_1_proc_U0_m_axi_RESULT_r_AWREGION,
        m_axi_RESULT_r_AWUSER => Loop_1_proc_U0_m_axi_RESULT_r_AWUSER,
        m_axi_RESULT_r_WVALID => Loop_1_proc_U0_m_axi_RESULT_r_WVALID,
        m_axi_RESULT_r_WREADY => RESULT_WREADY,
        m_axi_RESULT_r_WDATA => Loop_1_proc_U0_m_axi_RESULT_r_WDATA,
        m_axi_RESULT_r_WSTRB => Loop_1_proc_U0_m_axi_RESULT_r_WSTRB,
        m_axi_RESULT_r_WLAST => Loop_1_proc_U0_m_axi_RESULT_r_WLAST,
        m_axi_RESULT_r_WID => Loop_1_proc_U0_m_axi_RESULT_r_WID,
        m_axi_RESULT_r_WUSER => Loop_1_proc_U0_m_axi_RESULT_r_WUSER,
        m_axi_RESULT_r_ARVALID => Loop_1_proc_U0_m_axi_RESULT_r_ARVALID,
        m_axi_RESULT_r_ARREADY => ap_const_logic_0,
        m_axi_RESULT_r_ARADDR => Loop_1_proc_U0_m_axi_RESULT_r_ARADDR,
        m_axi_RESULT_r_ARID => Loop_1_proc_U0_m_axi_RESULT_r_ARID,
        m_axi_RESULT_r_ARLEN => Loop_1_proc_U0_m_axi_RESULT_r_ARLEN,
        m_axi_RESULT_r_ARSIZE => Loop_1_proc_U0_m_axi_RESULT_r_ARSIZE,
        m_axi_RESULT_r_ARBURST => Loop_1_proc_U0_m_axi_RESULT_r_ARBURST,
        m_axi_RESULT_r_ARLOCK => Loop_1_proc_U0_m_axi_RESULT_r_ARLOCK,
        m_axi_RESULT_r_ARCACHE => Loop_1_proc_U0_m_axi_RESULT_r_ARCACHE,
        m_axi_RESULT_r_ARPROT => Loop_1_proc_U0_m_axi_RESULT_r_ARPROT,
        m_axi_RESULT_r_ARQOS => Loop_1_proc_U0_m_axi_RESULT_r_ARQOS,
        m_axi_RESULT_r_ARREGION => Loop_1_proc_U0_m_axi_RESULT_r_ARREGION,
        m_axi_RESULT_r_ARUSER => Loop_1_proc_U0_m_axi_RESULT_r_ARUSER,
        m_axi_RESULT_r_RVALID => ap_const_logic_0,
        m_axi_RESULT_r_RREADY => Loop_1_proc_U0_m_axi_RESULT_r_RREADY,
        m_axi_RESULT_r_RDATA => ap_const_lv32_0,
        m_axi_RESULT_r_RLAST => ap_const_logic_0,
        m_axi_RESULT_r_RID => ap_const_lv1_0,
        m_axi_RESULT_r_RFIFONUM => ap_const_lv9_0,
        m_axi_RESULT_r_RUSER => ap_const_lv1_0,
        m_axi_RESULT_r_RRESP => ap_const_lv2_0,
        m_axi_RESULT_r_BVALID => RESULT_BVALID,
        m_axi_RESULT_r_BREADY => Loop_1_proc_U0_m_axi_RESULT_r_BREADY,
        m_axi_RESULT_r_BRESP => RESULT_BRESP,
        m_axi_RESULT_r_BID => RESULT_BID,
        m_axi_RESULT_r_BUSER => RESULT_BUSER,
        M2int_address0 => Loop_1_proc_U0_M2int_address0,
        M2int_ce0 => Loop_1_proc_U0_M2int_ce0,
        M2int_q0 => M2int_t_q0);

    result_c_U : component CAL_Hu_fifo_w64_d6_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_result_c_din,
        if_full_n => result_c_full_n,
        if_write => entry_proc_U0_result_c_write,
        if_dout => result_c_dout,
        if_num_data_valid => result_c_num_data_valid,
        if_fifo_cap => result_c_fifo_cap,
        if_empty_n => result_c_empty_n,
        if_read => Loop_1_proc_U0_result_read);

    img_0_data_U : component CAL_Hu_fifo_w24_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2xfMat_24_9_300_512_1_2_U0_img_0_data14_din,
        if_full_n => img_0_data_full_n,
        if_write => AXIvideo2xfMat_24_9_300_512_1_2_U0_img_0_data14_write,
        if_dout => img_0_data_dout,
        if_num_data_valid => img_0_data_num_data_valid,
        if_fifo_cap => img_0_data_fifo_cap,
        if_empty_n => img_0_data_empty_n,
        if_read => rgb2gray_9_0_300_512_1_2_2_U0_img_0_data14_read);

    img_0_rows_c_U : component CAL_Hu_fifo_w9_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2xfMat_24_9_300_512_1_2_U0_img_0_rows_c_din,
        if_full_n => img_0_rows_c_full_n,
        if_write => AXIvideo2xfMat_24_9_300_512_1_2_U0_img_0_rows_c_write,
        if_dout => img_0_rows_c_dout,
        if_num_data_valid => img_0_rows_c_num_data_valid,
        if_fifo_cap => img_0_rows_c_fifo_cap,
        if_empty_n => img_0_rows_c_empty_n,
        if_read => rgb2gray_9_0_300_512_1_2_2_U0_p_src_rows_read);

    img_0_cols_c_U : component CAL_Hu_fifo_w10_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2xfMat_24_9_300_512_1_2_U0_img_0_cols_c_din,
        if_full_n => img_0_cols_c_full_n,
        if_write => AXIvideo2xfMat_24_9_300_512_1_2_U0_img_0_cols_c_write,
        if_dout => img_0_cols_c_dout,
        if_num_data_valid => img_0_cols_c_num_data_valid,
        if_fifo_cap => img_0_cols_c_fifo_cap,
        if_empty_n => img_0_cols_c_empty_n,
        if_read => rgb2gray_9_0_300_512_1_2_2_U0_p_src_cols_read);

    img_1_data_U : component CAL_Hu_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rgb2gray_9_0_300_512_1_2_2_U0_img_1_data15_din,
        if_full_n => img_1_data_full_n,
        if_write => rgb2gray_9_0_300_512_1_2_2_U0_img_1_data15_write,
        if_dout => img_1_data_dout,
        if_num_data_valid => img_1_data_num_data_valid,
        if_fifo_cap => img_1_data_fifo_cap,
        if_empty_n => img_1_data_empty_n,
        if_read => HuMoment_0_300_512_1_2_U0_img_1_data15_read);

    start_for_rgb2gray_9_0_300_512_1_2_2_U0_U : component CAL_Hu_start_for_rgb2gray_9_0_300_512_1_2_2_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_rgb2gray_9_0_300_512_1_2_2_U0_din,
        if_full_n => start_for_rgb2gray_9_0_300_512_1_2_2_U0_full_n,
        if_write => AXIvideo2xfMat_24_9_300_512_1_2_U0_start_write,
        if_dout => start_for_rgb2gray_9_0_300_512_1_2_2_U0_dout,
        if_empty_n => start_for_rgb2gray_9_0_300_512_1_2_2_U0_empty_n,
        if_read => rgb2gray_9_0_300_512_1_2_2_U0_ap_ready);

    start_for_HuMoment_0_300_512_1_2_U0_U : component CAL_Hu_start_for_HuMoment_0_300_512_1_2_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_HuMoment_0_300_512_1_2_U0_din,
        if_full_n => start_for_HuMoment_0_300_512_1_2_U0_full_n,
        if_write => rgb2gray_9_0_300_512_1_2_2_U0_start_write,
        if_dout => start_for_HuMoment_0_300_512_1_2_U0_dout,
        if_empty_n => start_for_HuMoment_0_300_512_1_2_U0_empty_n,
        if_read => HuMoment_0_300_512_1_2_U0_ap_ready);





    ap_sync_reg_AXIvideo2xfMat_24_9_300_512_1_2_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_AXIvideo2xfMat_24_9_300_512_1_2_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_AXIvideo2xfMat_24_9_300_512_1_2_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_AXIvideo2xfMat_24_9_300_512_1_2_U0_ap_ready <= ap_sync_AXIvideo2xfMat_24_9_300_512_1_2_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    AXIvideo2xfMat_24_9_300_512_1_2_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2xfMat_24_9_300_512_1_2_U0_ap_start <= ((ap_sync_reg_AXIvideo2xfMat_24_9_300_512_1_2_U0_ap_ready xor ap_const_logic_1) and ap_start);
    HuMoment_0_300_512_1_2_U0_ap_continue <= M2int_i_full_n;
    HuMoment_0_300_512_1_2_U0_ap_start <= start_for_HuMoment_0_300_512_1_2_U0_empty_n;
    INPUT_STREAM_TREADY <= AXIvideo2xfMat_24_9_300_512_1_2_U0_INPUT_STREAM_TREADY;
    Loop_1_proc_U0_ap_continue <= ap_const_logic_1;
    Loop_1_proc_U0_ap_start <= M2int_t_empty_n;
    RESULT_BID <= ap_const_lv1_0;
    RESULT_BRESP <= ap_const_lv2_0;
    RESULT_BUSER <= ap_const_lv1_0;
    ap_done <= Loop_1_proc_U0_ap_done;
    ap_idle <= (rgb2gray_9_0_300_512_1_2_2_U0_ap_idle and (ap_const_logic_1 xor M2int_t_empty_n) and entry_proc_U0_ap_idle and Loop_1_proc_U0_ap_idle and HuMoment_0_300_512_1_2_U0_ap_idle and AXIvideo2xfMat_24_9_300_512_1_2_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_AXIvideo2xfMat_24_9_300_512_1_2_U0_ap_ready <= (ap_sync_reg_AXIvideo2xfMat_24_9_300_512_1_2_U0_ap_ready or AXIvideo2xfMat_24_9_300_512_1_2_U0_ap_ready);
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_ready <= (ap_sync_entry_proc_U0_ap_ready and ap_sync_AXIvideo2xfMat_24_9_300_512_1_2_U0_ap_ready);
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    rgb2gray_9_0_300_512_1_2_2_U0_ap_continue <= ap_const_logic_1;
    rgb2gray_9_0_300_512_1_2_2_U0_ap_start <= start_for_rgb2gray_9_0_300_512_1_2_2_U0_empty_n;
    start_for_HuMoment_0_300_512_1_2_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_rgb2gray_9_0_300_512_1_2_2_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module CAL_Hu_Loop_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        result_dout,
        result_num_data_valid,
        result_fifo_cap,
        result_empty_n,
        result_read,
        m_axi_RESULT_r_AWVALID,
        m_axi_RESULT_r_AWREADY,
        m_axi_RESULT_r_AWADDR,
        m_axi_RESULT_r_AWID,
        m_axi_RESULT_r_AWLEN,
        m_axi_RESULT_r_AWSIZE,
        m_axi_RESULT_r_AWBURST,
        m_axi_RESULT_r_AWLOCK,
        m_axi_RESULT_r_AWCACHE,
        m_axi_RESULT_r_AWPROT,
        m_axi_RESULT_r_AWQOS,
        m_axi_RESULT_r_AWREGION,
        m_axi_RESULT_r_AWUSER,
        m_axi_RESULT_r_WVALID,
        m_axi_RESULT_r_WREADY,
        m_axi_RESULT_r_WDATA,
        m_axi_RESULT_r_WSTRB,
        m_axi_RESULT_r_WLAST,
        m_axi_RESULT_r_WID,
        m_axi_RESULT_r_WUSER,
        m_axi_RESULT_r_ARVALID,
        m_axi_RESULT_r_ARREADY,
        m_axi_RESULT_r_ARADDR,
        m_axi_RESULT_r_ARID,
        m_axi_RESULT_r_ARLEN,
        m_axi_RESULT_r_ARSIZE,
        m_axi_RESULT_r_ARBURST,
        m_axi_RESULT_r_ARLOCK,
        m_axi_RESULT_r_ARCACHE,
        m_axi_RESULT_r_ARPROT,
        m_axi_RESULT_r_ARQOS,
        m_axi_RESULT_r_ARREGION,
        m_axi_RESULT_r_ARUSER,
        m_axi_RESULT_r_RVALID,
        m_axi_RESULT_r_RREADY,
        m_axi_RESULT_r_RDATA,
        m_axi_RESULT_r_RLAST,
        m_axi_RESULT_r_RID,
        m_axi_RESULT_r_RFIFONUM,
        m_axi_RESULT_r_RUSER,
        m_axi_RESULT_r_RRESP,
        m_axi_RESULT_r_BVALID,
        m_axi_RESULT_r_BREADY,
        m_axi_RESULT_r_BRESP,
        m_axi_RESULT_r_BID,
        m_axi_RESULT_r_BUSER,
        M2int_address0,
        M2int_ce0,
        M2int_q0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] result_dout;
input  [3:0] result_num_data_valid;
input  [3:0] result_fifo_cap;
input   result_empty_n;
output   result_read;
output   m_axi_RESULT_r_AWVALID;
input   m_axi_RESULT_r_AWREADY;
output  [63:0] m_axi_RESULT_r_AWADDR;
output  [0:0] m_axi_RESULT_r_AWID;
output  [31:0] m_axi_RESULT_r_AWLEN;
output  [2:0] m_axi_RESULT_r_AWSIZE;
output  [1:0] m_axi_RESULT_r_AWBURST;
output  [1:0] m_axi_RESULT_r_AWLOCK;
output  [3:0] m_axi_RESULT_r_AWCACHE;
output  [2:0] m_axi_RESULT_r_AWPROT;
output  [3:0] m_axi_RESULT_r_AWQOS;
output  [3:0] m_axi_RESULT_r_AWREGION;
output  [0:0] m_axi_RESULT_r_AWUSER;
output   m_axi_RESULT_r_WVALID;
input   m_axi_RESULT_r_WREADY;
output  [31:0] m_axi_RESULT_r_WDATA;
output  [3:0] m_axi_RESULT_r_WSTRB;
output   m_axi_RESULT_r_WLAST;
output  [0:0] m_axi_RESULT_r_WID;
output  [0:0] m_axi_RESULT_r_WUSER;
output   m_axi_RESULT_r_ARVALID;
input   m_axi_RESULT_r_ARREADY;
output  [63:0] m_axi_RESULT_r_ARADDR;
output  [0:0] m_axi_RESULT_r_ARID;
output  [31:0] m_axi_RESULT_r_ARLEN;
output  [2:0] m_axi_RESULT_r_ARSIZE;
output  [1:0] m_axi_RESULT_r_ARBURST;
output  [1:0] m_axi_RESULT_r_ARLOCK;
output  [3:0] m_axi_RESULT_r_ARCACHE;
output  [2:0] m_axi_RESULT_r_ARPROT;
output  [3:0] m_axi_RESULT_r_ARQOS;
output  [3:0] m_axi_RESULT_r_ARREGION;
output  [0:0] m_axi_RESULT_r_ARUSER;
input   m_axi_RESULT_r_RVALID;
output   m_axi_RESULT_r_RREADY;
input  [31:0] m_axi_RESULT_r_RDATA;
input   m_axi_RESULT_r_RLAST;
input  [0:0] m_axi_RESULT_r_RID;
input  [8:0] m_axi_RESULT_r_RFIFONUM;
input  [0:0] m_axi_RESULT_r_RUSER;
input  [1:0] m_axi_RESULT_r_RRESP;
input   m_axi_RESULT_r_BVALID;
output   m_axi_RESULT_r_BREADY;
input  [1:0] m_axi_RESULT_r_BRESP;
input  [0:0] m_axi_RESULT_r_BID;
input  [0:0] m_axi_RESULT_r_BUSER;
output  [0:0] M2int_address0;
output   M2int_ce0;
input  [31:0] M2int_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg result_read;
reg m_axi_RESULT_r_AWVALID;
reg[63:0] m_axi_RESULT_r_AWADDR;
reg[0:0] m_axi_RESULT_r_AWID;
reg[31:0] m_axi_RESULT_r_AWLEN;
reg[2:0] m_axi_RESULT_r_AWSIZE;
reg[1:0] m_axi_RESULT_r_AWBURST;
reg[1:0] m_axi_RESULT_r_AWLOCK;
reg[3:0] m_axi_RESULT_r_AWCACHE;
reg[2:0] m_axi_RESULT_r_AWPROT;
reg[3:0] m_axi_RESULT_r_AWQOS;
reg[3:0] m_axi_RESULT_r_AWREGION;
reg[0:0] m_axi_RESULT_r_AWUSER;
reg m_axi_RESULT_r_WVALID;
reg m_axi_RESULT_r_BREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    result_blk_n;
reg    RESULT_r_blk_n_AW;
wire    ap_CS_fsm_state2;
reg    RESULT_r_blk_n_B;
wire    ap_CS_fsm_state9;
reg   [61:0] trunc_ln_reg_87;
wire    grp_Loop_1_proc_Pipeline_1_fu_58_ap_start;
wire    grp_Loop_1_proc_Pipeline_1_fu_58_ap_done;
wire    grp_Loop_1_proc_Pipeline_1_fu_58_ap_idle;
wire    grp_Loop_1_proc_Pipeline_1_fu_58_ap_ready;
wire    grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWVALID;
wire   [63:0] grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWADDR;
wire   [0:0] grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWID;
wire   [31:0] grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWLEN;
wire   [2:0] grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWSIZE;
wire   [1:0] grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWBURST;
wire   [1:0] grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWLOCK;
wire   [3:0] grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWCACHE;
wire   [2:0] grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWPROT;
wire   [3:0] grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWQOS;
wire   [3:0] grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWREGION;
wire   [0:0] grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWUSER;
wire    grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WVALID;
wire   [31:0] grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WDATA;
wire   [3:0] grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WSTRB;
wire    grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WLAST;
wire   [0:0] grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WID;
wire   [0:0] grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WUSER;
wire    grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARVALID;
wire   [63:0] grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARADDR;
wire   [0:0] grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARID;
wire   [31:0] grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARLEN;
wire   [2:0] grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARSIZE;
wire   [1:0] grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARBURST;
wire   [1:0] grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARLOCK;
wire   [3:0] grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARCACHE;
wire   [2:0] grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARPROT;
wire   [3:0] grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARQOS;
wire   [3:0] grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARREGION;
wire   [0:0] grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARUSER;
wire    grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_RREADY;
wire    grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_BREADY;
wire   [0:0] grp_Loop_1_proc_Pipeline_1_fu_58_M2int_address0;
wire    grp_Loop_1_proc_Pipeline_1_fu_58_M2int_ce0;
reg    grp_Loop_1_proc_Pipeline_1_fu_58_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire  signed [63:0] sext_ln31_fu_77_p1;
reg    ap_block_state1;
reg   [8:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
#0 grp_Loop_1_proc_Pipeline_1_fu_58_ap_start_reg = 1'b0;
end

CAL_Hu_Loop_1_proc_Pipeline_1 grp_Loop_1_proc_Pipeline_1_fu_58(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Loop_1_proc_Pipeline_1_fu_58_ap_start),
    .ap_done(grp_Loop_1_proc_Pipeline_1_fu_58_ap_done),
    .ap_idle(grp_Loop_1_proc_Pipeline_1_fu_58_ap_idle),
    .ap_ready(grp_Loop_1_proc_Pipeline_1_fu_58_ap_ready),
    .m_axi_RESULT_AWVALID(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWVALID),
    .m_axi_RESULT_AWREADY(m_axi_RESULT_r_AWREADY),
    .m_axi_RESULT_AWADDR(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWADDR),
    .m_axi_RESULT_AWID(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWID),
    .m_axi_RESULT_AWLEN(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWLEN),
    .m_axi_RESULT_AWSIZE(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWSIZE),
    .m_axi_RESULT_AWBURST(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWBURST),
    .m_axi_RESULT_AWLOCK(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWLOCK),
    .m_axi_RESULT_AWCACHE(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWCACHE),
    .m_axi_RESULT_AWPROT(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWPROT),
    .m_axi_RESULT_AWQOS(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWQOS),
    .m_axi_RESULT_AWREGION(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWREGION),
    .m_axi_RESULT_AWUSER(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWUSER),
    .m_axi_RESULT_WVALID(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WVALID),
    .m_axi_RESULT_WREADY(m_axi_RESULT_r_WREADY),
    .m_axi_RESULT_WDATA(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WDATA),
    .m_axi_RESULT_WSTRB(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WSTRB),
    .m_axi_RESULT_WLAST(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WLAST),
    .m_axi_RESULT_WID(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WID),
    .m_axi_RESULT_WUSER(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WUSER),
    .m_axi_RESULT_ARVALID(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARVALID),
    .m_axi_RESULT_ARREADY(1'b0),
    .m_axi_RESULT_ARADDR(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARADDR),
    .m_axi_RESULT_ARID(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARID),
    .m_axi_RESULT_ARLEN(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARLEN),
    .m_axi_RESULT_ARSIZE(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARSIZE),
    .m_axi_RESULT_ARBURST(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARBURST),
    .m_axi_RESULT_ARLOCK(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARLOCK),
    .m_axi_RESULT_ARCACHE(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARCACHE),
    .m_axi_RESULT_ARPROT(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARPROT),
    .m_axi_RESULT_ARQOS(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARQOS),
    .m_axi_RESULT_ARREGION(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARREGION),
    .m_axi_RESULT_ARUSER(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_ARUSER),
    .m_axi_RESULT_RVALID(1'b0),
    .m_axi_RESULT_RREADY(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_RREADY),
    .m_axi_RESULT_RDATA(32'd0),
    .m_axi_RESULT_RLAST(1'b0),
    .m_axi_RESULT_RID(1'd0),
    .m_axi_RESULT_RFIFONUM(9'd0),
    .m_axi_RESULT_RUSER(1'd0),
    .m_axi_RESULT_RRESP(2'd0),
    .m_axi_RESULT_BVALID(m_axi_RESULT_r_BVALID),
    .m_axi_RESULT_BREADY(grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_BREADY),
    .m_axi_RESULT_BRESP(m_axi_RESULT_r_BRESP),
    .m_axi_RESULT_BID(m_axi_RESULT_r_BID),
    .m_axi_RESULT_BUSER(m_axi_RESULT_r_BUSER),
    .sext_ln31(trunc_ln_reg_87),
    .M2int_address0(grp_Loop_1_proc_Pipeline_1_fu_58_M2int_address0),
    .M2int_ce0(grp_Loop_1_proc_Pipeline_1_fu_58_M2int_ce0),
    .M2int_q0(M2int_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((m_axi_RESULT_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Loop_1_proc_Pipeline_1_fu_58_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_Loop_1_proc_Pipeline_1_fu_58_ap_start_reg <= 1'b1;
        end else if ((grp_Loop_1_proc_Pipeline_1_fu_58_ap_ready == 1'b1)) begin
            grp_Loop_1_proc_Pipeline_1_fu_58_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln_reg_87 <= {{result_dout[63:2]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        RESULT_r_blk_n_AW = m_axi_RESULT_r_AWREADY;
    end else begin
        RESULT_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        RESULT_r_blk_n_B = m_axi_RESULT_r_BVALID;
    end else begin
        RESULT_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((result_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_RESULT_r_AWREADY == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_Loop_1_proc_Pipeline_1_fu_58_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((m_axi_RESULT_r_BVALID == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_RESULT_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_RESULT_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_RESULT_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_RESULT_r_AWADDR = sext_ln31_fu_77_p1;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_RESULT_r_AWADDR = grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWADDR;
    end else begin
        m_axi_RESULT_r_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_RESULT_r_AWBURST = grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWBURST;
    end else begin
        m_axi_RESULT_r_AWBURST = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_RESULT_r_AWCACHE = grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWCACHE;
    end else begin
        m_axi_RESULT_r_AWCACHE = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_RESULT_r_AWID = grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWID;
    end else begin
        m_axi_RESULT_r_AWID = 1'd0;
    end
end

always @ (*) begin
    if (((m_axi_RESULT_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_RESULT_r_AWLEN = 32'd2;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_RESULT_r_AWLEN = grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWLEN;
    end else begin
        m_axi_RESULT_r_AWLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_RESULT_r_AWLOCK = grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWLOCK;
    end else begin
        m_axi_RESULT_r_AWLOCK = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_RESULT_r_AWPROT = grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWPROT;
    end else begin
        m_axi_RESULT_r_AWPROT = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_RESULT_r_AWQOS = grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWQOS;
    end else begin
        m_axi_RESULT_r_AWQOS = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_RESULT_r_AWREGION = grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWREGION;
    end else begin
        m_axi_RESULT_r_AWREGION = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_RESULT_r_AWSIZE = grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWSIZE;
    end else begin
        m_axi_RESULT_r_AWSIZE = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_RESULT_r_AWUSER = grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWUSER;
    end else begin
        m_axi_RESULT_r_AWUSER = 1'd0;
    end
end

always @ (*) begin
    if (((m_axi_RESULT_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_RESULT_r_AWVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_RESULT_r_AWVALID = grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_AWVALID;
    end else begin
        m_axi_RESULT_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_RESULT_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        m_axi_RESULT_r_BREADY = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_RESULT_r_BREADY = grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_BREADY;
    end else begin
        m_axi_RESULT_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_RESULT_r_WVALID = grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WVALID;
    end else begin
        m_axi_RESULT_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        result_blk_n = result_empty_n;
    end else begin
        result_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((result_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        result_read = 1'b1;
    end else begin
        result_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((result_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((m_axi_RESULT_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_Loop_1_proc_Pipeline_1_fu_58_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((m_axi_RESULT_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M2int_address0 = grp_Loop_1_proc_Pipeline_1_fu_58_M2int_address0;

assign M2int_ce0 = grp_Loop_1_proc_Pipeline_1_fu_58_M2int_ce0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((result_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign grp_Loop_1_proc_Pipeline_1_fu_58_ap_start = grp_Loop_1_proc_Pipeline_1_fu_58_ap_start_reg;

assign m_axi_RESULT_r_ARADDR = 64'd0;

assign m_axi_RESULT_r_ARBURST = 2'd0;

assign m_axi_RESULT_r_ARCACHE = 4'd0;

assign m_axi_RESULT_r_ARID = 1'd0;

assign m_axi_RESULT_r_ARLEN = 32'd0;

assign m_axi_RESULT_r_ARLOCK = 2'd0;

assign m_axi_RESULT_r_ARPROT = 3'd0;

assign m_axi_RESULT_r_ARQOS = 4'd0;

assign m_axi_RESULT_r_ARREGION = 4'd0;

assign m_axi_RESULT_r_ARSIZE = 3'd0;

assign m_axi_RESULT_r_ARUSER = 1'd0;

assign m_axi_RESULT_r_ARVALID = 1'b0;

assign m_axi_RESULT_r_RREADY = 1'b0;

assign m_axi_RESULT_r_WDATA = grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WDATA;

assign m_axi_RESULT_r_WID = grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WID;

assign m_axi_RESULT_r_WLAST = grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WLAST;

assign m_axi_RESULT_r_WSTRB = grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WSTRB;

assign m_axi_RESULT_r_WUSER = grp_Loop_1_proc_Pipeline_1_fu_58_m_axi_RESULT_WUSER;

assign sext_ln31_fu_77_p1 = $signed(trunc_ln_reg_87);

endmodule //CAL_Hu_Loop_1_proc
